{"version":3,"sources":["assets\\Script\\src\\network\\base\\JTHttpRequest.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["namespace com \r\n{       \r\n\r\n        /**\r\n         * <p> <code>HttpRequest</code> 通过封装 HTML <code>XMLHttpRequest</code> 对象提供了对 HTTP 协议的完全的访问，包括做出 POST 和 HEAD 请求以及普通的 GET 请求的能力。 <code>HttpRequest</code> 只提供以异步的形式返回 Web 服务器的响应，并且能够以文本或者二进制的形式返回内容。</p>\r\n         * <p><b>注意：</b>建议每次请求都使用新的 <code>HttpRequest</code> 对象，因为每次调用该对象的send方法时，都会清空之前设置的数据，并重置 HTTP 请求的状态，这会导致之前还未返回响应的请求被重置，从而得不到之前请求的响应结果。</p>\r\n         */\r\n        export class JTHttpRequest extends JTEventDispatcher \r\n        {\r\n                /**@private */\r\n                protected _http = new XMLHttpRequest();\r\n                /**@private */\r\n                private static _urlEncode:Function = encodeURI;\r\n                /**@private */\r\n                protected _responseType: string;\r\n                /**@private */\r\n                protected _data: any;\r\n                /**@private */\r\n                protected _url: string;\r\n\r\n                static ERROR: string = \"error\";\r\n                /** 定义 complete 事件对象的 type 属性值。*/\r\n                static COMPLETE: string = \"complete\";\r\n                /** 定义 loaded 事件对象的 type 属性值。*/\r\n\r\n                /** 定义 progress 事件对象的 type 属性值。*/\r\n                static PROGRESS: string = \"progress\";\r\n\r\n                /**\r\n                 * 发送 HTTP 请求。\r\n                 * @param\turl\t\t\t\t请求的地址。大多数浏览器实施了一个同源安全策略，并且要求这个 URL 与包含脚本的文本具有相同的主机名和端口。\r\n                 * @param\tdata\t\t\t(default = null)发送的数据。\r\n                 * @param\tmethod\t\t\t(default = \"get\")用于请求的 HTTP 方法。值包括 \"get\"、\"post\"、\"head\"。\r\n                 * @param\tresponseType\t(default = \"text\")Web 服务器的响应类型，可设置为 \"text\"、\"json\"、\"xml\"、\"arraybuffer\"。\r\n                 * @param\theaders\t\t\t(default = null) HTTP 请求的头部信息。参数形如key-value数组：key是头部的名称，不应该包括空白、冒号或换行；value是头部的值，不应该包括换行。比如[\"Content-Type\", \"application/json\"]。\r\n                 */\r\n                send(url: string, data: any = null, method: string = \"get\", responseType: string = \"text\", headers: any[]|null = null): void \r\n                {\r\n                        this._responseType = responseType;\r\n                        this._data = null;\r\n\r\n                        // if (Browser.onVVMiniGame || Browser.onQGMiniGame || Browser.onQQMiniGame || Browser.onAlipayMiniGame || Browser.onBLMiniGame || Browser.onHWMiniGame || Browser.onTTMiniGame || Browser.onTBMiniGame) {\r\n                        //     url = HttpRequest._urlEncode(url);\r\n                        // }\r\n                        this._url = url;\r\n                        var _this: JTHttpRequest = this;\r\n                        var http = this._http;\r\n                        //临时，因为微信不支持以下文件格式\r\n                        http.open(method, url, true);\r\n                        let isJson = false;\r\n                        if (headers) \r\n                        {\r\n                                for (var i: number = 0; i < headers.length; i++) \r\n                                {\r\n                                        http.setRequestHeader(headers[i++], headers[i]);\r\n                                }\r\n                        } \r\n                        else if (!(((<any>window)).conch)) \r\n                        {\r\n                                if (!data || typeof (data) == 'string') http.setRequestHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");\r\n                                else\r\n                                { \r\n                                        http.setRequestHeader(\"Content-Type\", \"application/json\");\r\n                                        if (!(data instanceof ArrayBuffer) && typeof data !== \"string\") \r\n                                        {\r\n                                                isJson=true;\r\n                                        }\r\n                                }\r\n                        }\r\n                        let restype: XMLHttpRequestResponseType = responseType !== \"arraybuffer\" ? \"text\" : \"arraybuffer\";\r\n                        http.responseType = restype;\r\n                        if ((http as any).dataType) \r\n                        {//for Ali\r\n                                (http as any).dataType = restype;\r\n                        }\r\n                        http.onerror = function (e: any): void \r\n                        {\r\n                                _this._onError(e);\r\n                        }\r\n                        http.onabort = function (e: any): void \r\n                        {\r\n                                _this._onAbort(e);\r\n                        }\r\n                        http.onprogress = function (e: any): void \r\n                        {\r\n                                _this._onProgress(e);\r\n                        }\r\n                        http.onload = function (e: any): void \r\n                        {\r\n                                _this._onLoad(e);\r\n                        }\r\n                        // if(Browser.onBLMiniGame&&Browser.onAndroid&&!data)data={};\r\n                        http.send( isJson?JSON.stringify(data):data);\r\n                }\r\n\r\n                /**\r\n                 * @private\r\n                 * 请求进度的侦听处理函数。\r\n                 * @param\te 事件对象。\r\n                 */\r\n                protected _onProgress(e: any): void \r\n                {\r\n                        if (e && e.lengthComputable) this.dispatchEvent(JTHttpRequest.PROGRESS, e.loaded / e.total);\r\n                }\r\n\r\n                /**\r\n                 * @private\r\n                 * 请求中断的侦听处理函数。\r\n                 * @param\te 事件对象。\r\n                 */\r\n                protected _onAbort(e: any): void \r\n                {\r\n                        this.error(\"Request was aborted by user\");\r\n                }\r\n\r\n                /**\r\n                 * @private\r\n                 * 请求出错侦的听处理函数。\r\n                 * @param\te 事件对象。\r\n                 */\r\n                protected _onError(e: any): void \r\n                {\r\n                        this.error(\"Request failed Status:\" + this._http.status + \" text:\" + this._http.statusText);\r\n                }\r\n\r\n                /**\r\n                 * @private\r\n                 * 请求消息返回的侦听处理函数。\r\n                 * @param\te 事件对象。\r\n                 */\r\n                protected _onLoad(e: any): void \r\n                {\r\n                        var http: any = this._http;\r\n                        var status: number = http.status !== undefined ? http.status : 200;\r\n                        if (status === 200 || status === 204 || status === 0) \r\n                        {\r\n                                this.complete();\r\n                        } \r\n                        else \r\n                        {\r\n                                this.error(\"[\" + http.status + \"]\" + http.statusText + \":\" + http.responseURL);\r\n                        }\r\n                }\r\n\r\n                /**\r\n                 * @private\r\n                 * 请求错误的处理函数。\r\n                 * @param\tmessage 错误信息。\r\n                 */\r\n                protected error(message: string): void \r\n                {\r\n                        this.clear();\r\n                        console.warn(this.url, message);\r\n                        this.dispatchEvent(JTHttpRequest.ERROR, message);\r\n                }\r\n\r\n                /**\r\n                 * @private\r\n                 * 请求成功完成的处理函数。\r\n                 */\r\n                protected complete(): void \r\n                {\r\n                        this.clear();\r\n                        var flag: boolean = true;\r\n                        try \r\n                        {\r\n                                if (this._responseType === \"json\") \r\n                                {\r\n                                        this._data = JSON.parse(this._http.responseText);\r\n                                } \r\n                                else if (this._responseType === \"xml\") \r\n                                {\r\n                                        this._data = JTHttpRequest.parseXMLFromString(this._http.responseText);\r\n                                } \r\n                                else \r\n                                {\r\n                                        this._data = this._http.response || this._http.responseText;\r\n                                }\r\n                        } \r\n                        catch (e) \r\n                        {\r\n                                flag = false;\r\n                                this.error(e.message);\r\n                        }\r\n                        flag && this.dispatchEvent(JTHttpRequest.COMPLETE, this._data instanceof Array ? [this._data] : this._data);\r\n                }\r\n\r\n                static parseXMLFromString: Function = function (value: string): XMLDocument \r\n                {\r\n                        var rst: any;\r\n                        value = value.replace(/>\\s+</g, '><');\r\n                        rst = (new DOMParser()).parseFromString(value, 'text/xml');\r\n                        if (rst.firstChild.textContent.indexOf(\"This page contains the following errors\") > -1) \r\n                        {\r\n                                throw new Error(rst.firstChild.firstChild.textContent);\r\n                        }\r\n                        return rst;\r\n                }\r\n\r\n                /**\r\n                 * @private\r\n                 * 清除当前请求。\r\n                 */\r\n                protected clear(): void \r\n                {\r\n                        var http: any = this._http;\r\n                        http.onerror = http.onabort = http.onprogress = http.onload = null;\r\n                }\r\n\r\n                /** 请求的地址。*/\r\n                get url(): string \r\n                {\r\n                        return this._url;\r\n                }\r\n\r\n                /** 返回的数据。*/\r\n                get data(): any \r\n                {\r\n                        return this._data;\r\n                }\r\n\r\n                /**\r\n                 * 本对象所封装的原生 XMLHttpRequest 引用。\r\n                 */\r\n                get http(): any \r\n                {\r\n                        return this._http;\r\n                }\r\n        }\r\n}"]}