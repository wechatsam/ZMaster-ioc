{"version":3,"sources":["assets\\Script\\src\\network\\base\\JTBuffer.ts"],"names":[],"mappings":";;;;;;IAEA,IAAU,GAAG,CA6yBZ;IA7yBD,WAAU,GAAG;QAMT;YAiDI,kBAAY,IAAgB;gBAAhB,qBAAA,EAAA,WAAgB;gBAhClB,SAAI,GAAY,IAAI,CAAC;gBAEvB,gBAAW,GAAW,CAAC,CAAC;gBAMtB,UAAK,GAAW,CAAC,CAAC;gBAElB,YAAO,GAAW,CAAC,CAAC;gBAuB1B,IAAI,IAAI,EAAE;oBACN,IAAI,CAAC,KAAK,GAAG,IAAI,UAAU,CAAC,IAAI,CAAC,CAAC;oBAClC,IAAI,CAAC,GAAG,GAAG,IAAI,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;oBAC3C,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,GAAG,CAAC,UAAU,CAAC;iBACtC;qBAAM;oBACH,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;iBACxC;YACL,CAAC;YArBM,wBAAe,GAAtB;gBACI,IAAI,CAAC,QAAQ,CAAC,UAAU,EAAE;oBACtB,IAAI,MAAM,GAAQ,IAAI,WAAW,CAAC,CAAC,CAAC,CAAC;oBACrC,IAAI,QAAQ,CAAC,MAAM,CAAC,CAAC,QAAQ,CAAC,CAAC,EAAE,GAAG,EAAE,IAAI,CAAC,CAAC;oBAC5C,QAAQ,CAAC,UAAU,GAAG,CAAC,IAAI,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC,QAAQ,CAAC,aAAa,CAAC,CAAC,CAAC,QAAQ,CAAC,UAAU,CAAC;iBAC5G;gBACD,OAAO,QAAQ,CAAC,UAAU,CAAC;YAC/B,CAAC;YAmBD,sBAAI,4BAAM;qBAAV;oBACI,IAAI,SAAS,GAAgB,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC;oBAC7C,IAAI,SAAS,CAAC,UAAU,KAAK,IAAI,CAAC,OAAO;wBAAE,OAAO,SAAS,CAAC;oBAC5D,OAAO,SAAS,CAAC,KAAK,CAAC,CAAC,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;gBAC5C,CAAC;;;eAAA;YAQD,sBAAI,4BAAM;qBAAV;oBACI,OAAO,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,QAAQ,CAAC,aAAa,CAAC,CAAC,CAAC,QAAQ,CAAC,UAAU,CAAC;gBACpE,CAAC;qBAED,UAAW,KAAa;oBACpB,IAAI,CAAC,IAAI,GAAG,CAAC,KAAK,KAAK,QAAQ,CAAC,aAAa,CAAC,CAAC;gBACnD,CAAC;;;eAJA;YAWD,sBAAI,4BAAM;qBAMV;oBACI,OAAO,IAAI,CAAC,OAAO,CAAC;gBACxB,CAAC;qBARD,UAAW,KAAa;oBACpB,IAAI,IAAI,CAAC,WAAW,GAAG,KAAK;wBAAE,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,EAAE,IAAI,CAAC,WAAW,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;yBAClH,IAAI,IAAI,CAAC,WAAW,GAAG,KAAK;wBAAE,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC,CAAC;oBAChF,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;gBACzB,CAAC;;;eAAA;YAOO,gCAAa,GAArB,UAAsB,GAAW;gBAC7B,IAAI;oBACA,IAAI,WAAW,GAAQ,IAAI,UAAU,CAAC,GAAG,CAAC,CAAC;oBAC3C,IAAI,IAAI,CAAC,KAAK,IAAI,IAAI,EAAE;wBACpB,IAAI,IAAI,CAAC,KAAK,CAAC,MAAM,IAAI,GAAG;4BAAE,WAAW,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;;4BACrD,WAAW,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC;qBACrD;oBACD,IAAI,CAAC,KAAK,GAAG,WAAW,CAAC;oBACzB,IAAI,CAAC,GAAG,GAAG,IAAI,QAAQ,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;iBAC/C;gBAAC,OAAO,GAAG,EAAE;oBACV,MAAM,6BAA6B,GAAG,GAAG,CAAC;iBAC7C;YACL,CAAC;YAQD,4BAAS,GAAT;gBACI,OAAO,IAAI,CAAC,UAAU,EAAE,CAAC;YAC7B,CAAC;YAOD,6BAAU,GAAV;gBACI,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC,CAAC;YACxC,CAAC;YAUD,kCAAe,GAAf,UAAgB,KAAa,EAAE,GAAW;gBACtC,OAAO,IAAI,CAAC,gBAAgB,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;YAC7C,CAAC;YAQD,mCAAgB,GAAhB,UAAiB,KAAa,EAAE,GAAW;gBACvC,IAAI,GAAG,GAAW,KAAK,GAAG,GAAG,CAAC;gBAC9B,GAAG,GAAG,CAAC,GAAG,GAAG,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC;gBAChD,IAAI,CAAC,GAAQ,IAAI,YAAY,CAAC,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC,CAAC;gBACjE,IAAI,CAAC,KAAK,GAAG,GAAG,CAAC;gBACjB,OAAO,CAAC,CAAC;YACb,CAAC;YASD,gCAAa,GAAb,UAAc,KAAa,EAAE,GAAW;gBACpC,OAAO,IAAI,CAAC,cAAc,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;YAC3C,CAAC;YAQD,iCAAc,GAAd,UAAe,KAAa,EAAE,GAAW;gBACrC,IAAI,GAAG,GAAW,KAAK,GAAG,GAAG,CAAC;gBAC9B,GAAG,GAAG,CAAC,GAAG,GAAG,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC;gBAChD,IAAI,CAAC,GAAQ,IAAI,UAAU,CAAC,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC,CAAC;gBAC/D,IAAI,CAAC,KAAK,GAAG,GAAG,CAAC;gBACjB,OAAO,CAAC,CAAC;YACb,CAAC;YAUD,gCAAa,GAAb,UAAc,KAAa,EAAE,GAAW;gBACpC,OAAO,IAAI,CAAC,cAAc,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;YAC3C,CAAC;YAQD,iCAAc,GAAd,UAAe,KAAa,EAAE,GAAW;gBACrC,IAAI,GAAG,GAAW,KAAK,GAAG,GAAG,CAAC;gBAC9B,GAAG,GAAG,CAAC,GAAG,GAAG,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC;gBAChD,IAAI,CAAC,GAAQ,IAAI,UAAU,CAAC,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC,CAAC;gBAC/D,IAAI,CAAC,KAAK,GAAG,GAAG,CAAC;gBACjB,OAAO,CAAC,CAAC;YACb,CAAC;YAOD,6BAAU,GAAV;gBACI,OAAO,IAAI,CAAC,WAAW,EAAE,CAAC;YAC9B,CAAC;YAMD,8BAAW,GAAX;gBACI,IAAI,IAAI,CAAC,KAAK,GAAG,CAAC,GAAG,IAAI,CAAC,OAAO;oBAAE,MAAM,kCAAkC,CAAC;gBAC5E,IAAI,CAAC,GAAW,IAAI,CAAC,GAAG,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;gBAC3D,IAAI,CAAC,KAAK,IAAI,CAAC,CAAC;gBAChB,OAAO,CAAC,CAAC;YACb,CAAC;YAOD,6BAAU,GAAV;gBACI,OAAO,IAAI,CAAC,WAAW,EAAE,CAAC;YAC9B,CAAC;YAMD,8BAAW,GAAX;gBACI,IAAI,IAAI,CAAC,KAAK,GAAG,CAAC,GAAG,IAAI,CAAC,OAAO;oBAAE,MAAM,kCAAkC,CAAC;gBAC5E,IAAI,CAAC,GAAW,IAAI,CAAC,GAAG,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;gBAC3D,IAAI,CAAC,KAAK,IAAI,CAAC,CAAC;gBAChB,OAAO,CAAC,CAAC;YACb,CAAC;YAMD,+BAAY,GAAZ,UAAa,KAAa;gBACtB,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC;gBAClC,IAAI,CAAC,GAAG,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,EAAE,KAAK,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;gBAClD,IAAI,CAAC,KAAK,IAAI,CAAC,CAAC;YACpB,CAAC;YAMD,+BAAY,GAAZ,UAAa,KAAa;gBACtB,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC;gBAClC,IAAI,CAAC,GAAG,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,EAAE,KAAK,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;gBAClD,IAAI,CAAC,KAAK,IAAI,CAAC,CAAC;YACpB,CAAC;YAOD,2BAAQ,GAAR;gBACI,OAAO,IAAI,CAAC,SAAS,EAAE,CAAC;YAC5B,CAAC;YAMD,4BAAS,GAAT;gBACI,IAAI,IAAI,CAAC,KAAK,GAAG,CAAC,GAAG,IAAI,CAAC,OAAO;oBAAE,MAAM,gCAAgC,CAAC;gBAC1E,IAAI,KAAK,GAAW,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;gBAC7D,IAAI,CAAC,KAAK,IAAI,CAAC,CAAC;gBAChB,OAAO,KAAK,CAAC;YACjB,CAAC;YAOD,4BAAS,GAAT;gBACI,OAAO,IAAI,CAAC,UAAU,EAAE,CAAC;YAC7B,CAAC;YAMD,6BAAU,GAAV;gBACI,IAAI,IAAI,CAAC,KAAK,GAAG,CAAC,GAAG,IAAI,CAAC,OAAO;oBAAE,MAAM,iCAAiC,CAAC;gBAC3E,IAAI,CAAC,GAAW,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;gBAC1D,IAAI,CAAC,KAAK,IAAI,CAAC,CAAC;gBAChB,OAAO,CAAC,CAAC;YACb,CAAC;YAMD,6BAAU,GAAV,UAAW,KAAa;gBACpB,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC;gBAClC,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,EAAE,KAAK,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;gBAChD,IAAI,CAAC,KAAK,IAAI,CAAC,CAAC;YACpB,CAAC;YAMD,8BAAW,GAAX,UAAY,KAAa;gBACrB,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC;gBAClC,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,EAAE,KAAK,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;gBACjD,IAAI,CAAC,KAAK,IAAI,CAAC,CAAC;YACpB,CAAC;YAOD,2BAAQ,GAAR;gBACI,OAAO,IAAI,CAAC,SAAS,EAAE,CAAC;YAC5B,CAAC;YAMD,4BAAS,GAAT;gBACI,IAAI,IAAI,CAAC,KAAK,GAAG,CAAC,GAAG,IAAI,CAAC,OAAO;oBAAE,MAAM,gCAAgC,CAAC;gBAC1E,IAAI,EAAE,GAAW,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;gBAC1D,IAAI,CAAC,KAAK,IAAI,CAAC,CAAC;gBAChB,OAAO,EAAE,CAAC;YACd,CAAC;YAOD,4BAAS,GAAT;gBACI,OAAO,IAAI,CAAC,UAAU,EAAE,CAAC;YAC7B,CAAC;YAMD,6BAAU,GAAV;gBACI,IAAI,IAAI,CAAC,KAAK,GAAG,CAAC,GAAG,IAAI,CAAC,OAAO;oBAAE,MAAM,iCAAiC,CAAC;gBAC3E,IAAI,EAAE,GAAW,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;gBAC3D,IAAI,CAAC,KAAK,IAAI,CAAC,CAAC;gBAChB,OAAO,EAAE,CAAC;YACd,CAAC;YAMD,8BAAW,GAAX,UAAY,KAAa;gBACrB,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC;gBAClC,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,EAAE,KAAK,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;gBACjD,IAAI,CAAC,KAAK,IAAI,CAAC,CAAC;YACpB,CAAC;YAMD,6BAAU,GAAV,UAAW,KAAa;gBACpB,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC;gBAClC,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,EAAE,KAAK,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;gBAChD,IAAI,CAAC,KAAK,IAAI,CAAC,CAAC;YACpB,CAAC;YAOD,2BAAQ,GAAR;gBACI,OAAO,IAAI,CAAC,SAAS,EAAE,CAAC;YAC5B,CAAC;YAMD,4BAAS,GAAT;gBACI,IAAI,IAAI,CAAC,KAAK,GAAG,CAAC,GAAG,IAAI,CAAC,OAAO;oBAAE,MAAM,gCAAgC,CAAC;gBAC1E,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC;YACpC,CAAC;YAMD,6BAAU,GAAV,UAAW,KAAa;gBACpB,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC;gBAClC,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;gBACrC,IAAI,CAAC,KAAK,EAAE,CAAC;YACjB,CAAC;YASD,4BAAS,GAAT,UAAU,GAAW;gBACjB,OAAO,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;YAChC,CAAC;YASD,6BAAU,GAAV,UAAW,GAAW;gBAClB,OAAO,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;YAClC,CAAC;YASD,6BAAU,GAAV,UAAW,GAAW;gBAClB,OAAO,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;YACjC,CAAC;YASD,8BAAW,GAAX,UAAY,GAAW;gBACnB,OAAO,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC,GAAG,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;YAC9C,CAAC;YAQD,6BAAU,GAAV;gBACI,OAAO,IAAI,CAAC,WAAW,EAAE,CAAC;YAC9B,CAAC;YAQD,8BAAW,GAAX;gBACI,IAAI,GAAG,GAAa,IAAI,QAAQ,CAAC,IAAI,CAAC,UAAU,EAAE,EAAE,IAAI,CAAC,UAAU,EAAE,EAAE,IAAI,CAAC,UAAU,EAAE,EAAE,IAAI,CAAC,UAAU,EAAE,EAAE,IAAI,CAAC,UAAU,EAAE,EAAE,IAAI,CAAC,UAAU,EAAE,CAAC,CAAC;gBACnJ,OAAO,GAAG,CAAC;YACf,CAAC;YAQO,wBAAK,GAAb,UAAc,GAAW;gBACrB,IAAI,CAAC,GAAW,EAAE,EAAE,GAAG,GAAW,IAAI,CAAC,KAAK,GAAG,GAAG,EAAE,CAAS,EAAE,EAAU,EAAE,EAAU,EAAE,CAAC,GAAa,MAAM,CAAC,YAAY,CAAC;gBACzH,IAAI,CAAC,GAAQ,IAAI,CAAC,KAAK,EAAE,CAAC,GAAW,CAAC,CAAC;gBACvC,IAAI,IAAI,GAAU,EAAE,CAAC;gBACrB,IAAI,CAAC,GAAW,CAAC,CAAC;gBAClB,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;gBACnB,OAAO,IAAI,CAAC,KAAK,GAAG,GAAG,EAAE;oBACrB,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC;oBACpB,IAAI,CAAC,GAAG,IAAI,EAAE;wBACV,IAAI,CAAC,IAAI,CAAC;4BAEN,IAAI,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;qBACxB;yBAAM,IAAI,CAAC,GAAG,IAAI,EAAE;wBAEjB,IAAI,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC;qBAC/D;yBAAM,IAAI,CAAC,GAAG,IAAI,EAAE;wBACjB,EAAE,GAAG,CAAC,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC;wBAErB,IAAI,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,IAAI,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC;qBACrF;yBAAM;wBACH,EAAE,GAAG,CAAC,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC;wBACrB,EAAE,GAAG,CAAC,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC;wBAErB,IAAM,KAAK,GAAG,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,IAAG,EAAE,CAAC,GAAE,CAAC,CAAC,EAAE,GAAG,IAAI,CAAC,IAAG,EAAE,CAAC,GAAE,CAAC,CAAC,EAAE,GAAG,IAAI,CAAC,IAAG,CAAC,CAAC,GAAE,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,GAAG,IAAI,CAAC,CAAC;wBACjG,IAAI,KAAK,IAAI,OAAO,EACpB;4BACI,IAAM,OAAO,GAAG,KAAK,GAAG,OAAO,CAAC;4BAChC,IAAM,KAAK,GAAG,MAAM,GAAG,CAAC,OAAO,IAAI,EAAE,CAAC,CAAC;4BACvC,IAAM,MAAM,GAAG,MAAM,GAAG,CAAC,OAAO,GAAG,KAAK,CAAC,CAAC;4BAC1C,IAAI,CAAC,CAAC,EAAE,CAAC,GAAC,CAAC,CAAC,KAAK,CAAC,CAAC;4BACnB,IAAI,CAAC,CAAC,EAAE,CAAC,GAAC,CAAC,CAAC,MAAM,CAAC,CAAC;yBACvB;6BAED;4BACI,IAAI,CAAC,CAAC,EAAE,CAAC,GAAC,CAAC,CAAC,KAAK,CAAC,CAAC;yBACtB;qBACJ;oBACD,CAAC,EAAE,CAAC;iBACP;gBACD,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC;gBAChB,OAAO,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;YAEzB,CAAC;YASD,kCAAe,GAAf,UAAgB,GAAW;gBACvB,OAAO,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,CAAC;YACtC,CAAC;YASD,mCAAgB,GAAhB,UAAiB,GAAW;gBACxB,IAAI,CAAC,GAAW,EAAE,EAAE,IAAI,GAAW,CAAC,EAAE,CAAS,EAAE,EAAU,EAAE,CAAC,GAAa,MAAM,CAAC,YAAY,CAAC;gBAC/F,IAAI,CAAC,GAAQ,IAAI,CAAC,KAAK,EAAE,CAAC,GAAW,CAAC,CAAC;gBACvC,OAAO,GAAG,GAAG,CAAC,EAAE;oBACZ,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;oBAClB,IAAI,CAAC,GAAG,IAAI,EAAE;wBACV,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;wBACV,IAAI,CAAC,KAAK,EAAE,CAAC;wBACb,GAAG,EAAE,CAAC;qBACT;yBAAM;wBACH,IAAI,GAAG,CAAC,GAAG,IAAI,CAAC;wBAChB,IAAI,CAAC,KAAK,EAAE,CAAC;wBACb,GAAG,IAAI,IAAI,CAAC;wBACZ,OAAO,IAAI,GAAG,CAAC,EAAE;4BACb,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC;4BACpB,EAAE,GAAG,CAAC,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC;4BACrB,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;4BACtB,IAAI,EAAE,CAAC;yBACV;qBACJ;iBACJ;gBAED,OAAO,CAAC,CAAC;YACb,CAAC;YAKD,sBAAI,yBAAG;qBAAP;oBACI,OAAO,IAAI,CAAC,KAAK,CAAC;gBACtB,CAAC;qBAED,UAAQ,KAAa;oBACjB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;gBAGvB,CAAC;;;eANA;YAWD,sBAAI,oCAAc;qBAAlB;oBACI,OAAO,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC;gBACrC,CAAC;;;eAAA;YAKD,wBAAK,GAAL;gBACI,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC;gBACf,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC;YACpB,CAAC;YAOD,8BAAW,GAAX;gBAEI,OAAO,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC;YAC3B,CAAC;YAOD,gCAAa,GAAb,UAAc,KAAa;gBAEvB,KAAK,GAAG,KAAK,GAAG,EAAE,CAAC;gBACnB,KAAK,IAAI,CAAC,GAAW,CAAC,EAAE,EAAE,GAAW,KAAK,CAAC,MAAM,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,EAAE,EAAE;oBAC5D,IAAI,CAAC,GAAW,KAAK,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;oBAEpC,IAAI,CAAC,IAAI,IAAI,EAAE;wBACX,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;qBACrB;yBAAM,IAAI,CAAC,IAAI,KAAK,EAAE;wBAEnB,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC;wBAClC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,IAAI,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,EAAE,IAAI,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;wBACjE,IAAI,CAAC,KAAK,IAAI,CAAC,CAAC;qBACnB;yBAAM,IAAI,CAAC,IAAI,MAAM,IAAI,CAAC,IAAG,MAAM,EAAC;wBACjC,CAAC,EAAE,CAAC;wBACJ,IAAM,EAAE,GAAC,KAAK,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;wBAC7B,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,IAAI,EAAE,IAAE,MAAM,IAAI,EAAE,IAAE,MAAM,EAC1C;4BACI,IAAM,GAAG,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,GAAG,IAAI,CAAC;4BAC/B,IAAM,GAAG,GAAG,EAAE,GAAG,KAAK,CAAC;4BAEvB,IAAM,GAAG,GAAG,IAAI,GAAG,CAAC,CAAC,GAAG,IAAE,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC;4BACrC,IAAM,GAAG,GAAG,IAAI,GAAG,CAAC,CAAC,GAAG,IAAE,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC;4BACrC,IAAM,GAAG,GAAG,IAAI,GAAG,CAAC,CAAC,GAAG,GAAG,GAAG,CAAC,IAAE,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,IAAE,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC;4BACvD,IAAM,GAAG,GAAG,IAAI,GAAG,CAAC,GAAG,GAAG,IAAI,CAAC,CAAC;4BAEhC,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,KAAK,GAAC,CAAC,CAAC,CAAC;4BAChC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,EAAC,IAAI,CAAC,KAAK,CAAC,CAAC;4BAChD,IAAI,CAAC,KAAK,IAAE,CAAC,CAAC;yBACjB;qBACJ;yBAAM,IAAI,CAAC,IAAI,MAAM,EAAE;wBACpB,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC;wBAClC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,IAAI,GAAG,CAAC,CAAC,IAAI,EAAE,CAAC,EAAE,IAAI,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,EAAE,IAAI,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;wBAC5F,IAAI,CAAC,KAAK,IAAI,CAAC,CAAC;qBACnB;yBAAM;wBACH,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC;wBAClC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,IAAI,GAAG,CAAC,CAAC,IAAI,EAAE,CAAC,EAAE,IAAI,GAAG,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,GAAG,IAAI,CAAC,EAAE,IAAI,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,EAAE,IAAI,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;wBACvH,IAAI,CAAC,KAAK,IAAI,CAAC,CAAC;qBACnB;iBACJ;YACL,CAAC;YAOD,iCAAc,GAAd,UAAe,KAAa;gBACxB,IAAI,IAAI,GAAW,IAAI,CAAC,GAAG,CAAC;gBAC5B,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;gBACpB,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;gBAC1B,IAAI,IAAI,GAAW,IAAI,CAAC,GAAG,GAAG,IAAI,GAAG,CAAC,CAAC;gBAEvC,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;YAC9C,CAAC;YAMD,mCAAgB,GAAhB,UAAiB,KAAY;gBACzB,IAAI,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC;gBACpB,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;gBACpB,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;gBAC1B,IAAI,IAAI,GAAG,IAAI,CAAC,GAAG,GAAG,IAAI,GAAG,CAAC,CAAC;gBAE/B,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;YAC9C,CAAC;YAQD,gCAAa,GAAb;gBAII,OAAO,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC,CAAC;YAC/C,CAAC;YAKD,kCAAe,GAAf;gBACI,OAAO,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC,CAAC;YAC/C,CAAC;YAOD,+BAAY,GAAZ;gBACI,OAAO,IAAI,CAAC,aAAa,EAAE,CAAC;YAChC,CAAC;YAQD,+BAAY,GAAZ,UAAa,GAAgB;gBAAhB,oBAAA,EAAA,OAAe,CAAC;gBACzB,IAAI,GAAG,KAAK,CAAC;oBAAE,OAAO,EAAE,CAAC;gBACzB,IAAI,SAAS,GAAW,IAAI,CAAC,cAAc,CAAC;gBAC5C,IAAI,GAAG,GAAG,SAAS;oBAAE,MAAM,oCAAoC,CAAC;gBAChE,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,SAAS,CAAC;gBAChC,OAAO,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;YAC3B,CAAC;YAQD,8BAAW,GAAX,UAAY,GAAgB;gBAAhB,oBAAA,EAAA,OAAe,CAAC;gBACxB,OAAO,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC;YAClC,CAAC;YAOD,4BAAS,GAAT,UAAU,KAAa;gBACnB,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC;gBAClC,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;gBACpC,IAAI,CAAC,KAAK,IAAI,CAAC,CAAC;YACpB,CAAC;YAOD,2BAAQ,GAAR;gBACI,IAAI,IAAI,CAAC,KAAK,GAAG,CAAC,GAAG,IAAI,CAAC,OAAO;oBAAE,MAAM,gCAAgC,CAAC;gBAC1E,OAAO,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC;YAC1C,CAAC;YAMD,0BAAO,GAAP;gBACI,OAAO,IAAI,CAAC,QAAQ,EAAE,CAAC;YAC3B,CAAC;YAOD,+BAAY,GAAZ,UAAa,cAAsB;gBAC/B,IAAI,IAAI,CAAC,OAAO,GAAG,cAAc;oBAAE,IAAI,CAAC,OAAO,GAAG,cAAc,CAAC;gBACjE,IAAI,IAAI,CAAC,WAAW,GAAG,cAAc;oBAAE,IAAI,CAAC,MAAM,GAAG,cAAc,CAAC;YACxE,CAAC;YAUD,mCAAgB,GAAhB,UAAiB,WAAgB,EAAE,MAAkB,EAAE,MAAkB;gBAAtC,uBAAA,EAAA,UAAkB;gBAAE,uBAAA,EAAA,UAAkB;gBACrE,IAAI,MAAM,GAAG,CAAC,IAAI,MAAM,GAAG,CAAC;oBAAE,MAAM,wCAAwC,CAAC;gBAC7E,IAAI,MAAM,IAAI,CAAC;oBAAE,MAAM,GAAG,WAAW,CAAC,UAAU,GAAG,MAAM,CAAC;gBAC1D,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,KAAK,GAAG,MAAM,CAAC,CAAC;gBACvC,IAAI,UAAU,GAAQ,IAAI,UAAU,CAAC,WAAW,CAAC,CAAC;gBAClD,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,UAAU,CAAC,QAAQ,CAAC,MAAM,EAAE,MAAM,GAAG,MAAM,CAAC,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;gBACzE,IAAI,CAAC,KAAK,IAAI,MAAM,CAAC;YACzB,CAAC;YAOD,kCAAe,GAAf,UAAgB,MAAc;gBAC1B,IAAI,GAAgB,CAAC;gBACrB,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,KAAK,GAAG,MAAM,CAAC,CAAC;gBAC/D,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,GAAG,MAAM,CAAA;gBAChC,OAAO,GAAG,CAAC;YACf,CAAC;YA9xBM,mBAAU,GAAW,WAAW,CAAC;YAMjC,sBAAa,GAAW,cAAc,CAAC;YAE/B,mBAAU,GAAW,IAAI,CAAC;YAuxB7C,eAAC;SAtyBD,AAsyBC,IAAA;QAtyBY,YAAQ,WAsyBpB,CAAA;IACL,CAAC,EA7yBS,GAAG,KAAH,GAAG,QA6yBZ","file":"","sourceRoot":"/","sourcesContent":[" \r\n\r\nnamespace com \r\n{\r\n    /**\r\n     * <p> <code>Byte</code> 类提供用于优化读取、写入以及处理二进制数据的方法和属性。</p>\r\n     * <p> <code>Byte</code> 类适用于需要在字节层访问数据的高级开发人员。</p>\r\n     */\r\n    export class JTBuffer {\r\n\r\n        /**\r\n         * <p>主机字节序，是 CPU 存放数据的两种不同顺序，包括小端字节序和大端字节序。通过 <code>getSystemEndian</code> 可以获取当前系统的字节序。</p>\r\n         * <p> <code>BIG_ENDIAN</code> ：大端字节序，地址低位存储值的高位，地址高位存储值的低位。有时也称之为网络字节序。<br/>\r\n         * <code>LITTLE_ENDIAN</code> ：小端字节序，地址低位存储值的低位，地址高位存储值的高位。</p>\r\n         */\r\n        static BIG_ENDIAN: string = \"bigEndian\";\r\n        /**\r\n         * <p>主机字节序，是 CPU 存放数据的两种不同顺序，包括小端字节序和大端字节序。通过 <code>getSystemEndian</code> 可以获取当前系统的字节序。</p>\r\n         * <p> <code>LITTLE_ENDIAN</code> ：小端字节序，地址低位存储值的低位，地址高位存储值的高位。<br/>\r\n         * <code>BIG_ENDIAN</code> ：大端字节序，地址低位存储值的高位，地址高位存储值的低位。有时也称之为网络字节序。</p>\r\n         */\r\n        static LITTLE_ENDIAN: string = \"littleEndian\";\r\n        /**@private */\r\n        private static _sysEndian: string = null;\r\n        /**@private 是否为小端数据。*/\r\n        protected _xd_: boolean = true;\r\n        /**@private */\r\n        private _allocated_: number = 8;\r\n        /**@private 原始数据。*/\r\n        protected _d_: any\r\n        /**@private DataView*/\r\n        protected _u8d_: any;\r\n        /**@private */\r\n        protected _pos_: number = 0;\r\n        /**@private */\r\n        protected _length: number = 0;\r\n\r\n        /**\r\n         * <p>获取当前主机的字节序。</p>\r\n         * <p>主机字节序，是 CPU 存放数据的两种不同顺序，包括小端字节序和大端字节序。</p>\r\n         * <p> <code>BIG_ENDIAN</code> ：大端字节序，地址低位存储值的高位，地址高位存储值的低位。有时也称之为网络字节序。<br/>\r\n         * <code>LITTLE_ENDIAN</code> ：小端字节序，地址低位存储值的低位，地址高位存储值的高位。</p>\r\n         * @return 当前系统的字节序。\r\n         */\r\n        static getSystemEndian(): string {\r\n            if (!JTBuffer._sysEndian) {\r\n                var buffer: any = new ArrayBuffer(2);\r\n                new DataView(buffer).setInt16(0, 256, true);\r\n                JTBuffer._sysEndian = (new Int16Array(buffer))[0] === 256 ? JTBuffer.LITTLE_ENDIAN : JTBuffer.BIG_ENDIAN;\r\n            }\r\n            return JTBuffer._sysEndian;\r\n        }\r\n\r\n        /**\r\n         * 创建一个 <code>Byte</code> 类的实例。\r\n         * @param\tdata\t用于指定初始化的元素数目，或者用于初始化的TypedArray对象、ArrayBuffer对象。如果为 null ，则预分配一定的内存空间，当可用空间不足时，优先使用这部分内存，如果还不够，则重新分配所需内存。\r\n         */\r\n        constructor(data: any = null) {\r\n            if (data) {\r\n                this._u8d_ = new Uint8Array(data);\r\n                this._d_ = new DataView(this._u8d_.buffer);\r\n                this._length = this._d_.byteLength;\r\n            } else {\r\n                this._resizeBuffer(this._allocated_);\r\n            }\r\n        }\r\n\r\n        /**\r\n         * 获取此对象的 ArrayBuffer 数据，数据只包含有效数据部分。\r\n         */\r\n        get buffer(): ArrayBuffer {\r\n            var rstBuffer: ArrayBuffer = this._d_.buffer;\r\n            if (rstBuffer.byteLength === this._length) return rstBuffer;\r\n            return rstBuffer.slice(0, this._length);\r\n        }\r\n\r\n        /**\r\n         * <p> <code>Byte</code> 实例的字节序。取值为：<code>BIG_ENDIAN</code> 或 <code>BIG_ENDIAN</code> 。</p>\r\n         * <p>主机字节序，是 CPU 存放数据的两种不同顺序，包括小端字节序和大端字节序。通过 <code>getSystemEndian</code> 可以获取当前系统的字节序。</p>\r\n         * <p> <code>BIG_ENDIAN</code> ：大端字节序，地址低位存储值的高位，地址高位存储值的低位。有时也称之为网络字节序。<br/>\r\n         *  <code>LITTLE_ENDIAN</code> ：小端字节序，地址低位存储值的低位，地址高位存储值的高位。</p>\r\n         */\r\n        get endian(): string {\r\n            return this._xd_ ? JTBuffer.LITTLE_ENDIAN : JTBuffer.BIG_ENDIAN;\r\n        }\r\n\r\n        set endian(value: string) {\r\n            this._xd_ = (value === JTBuffer.LITTLE_ENDIAN);\r\n        }\r\n\r\n        /**\r\n         * <p> <code>Byte</code> 对象的长度（以字节为单位）。</p>\r\n         * <p>如果将长度设置为大于当前长度的值，则用零填充字节数组的右侧；如果将长度设置为小于当前长度的值，将会截断该字节数组。</p>\r\n         * <p>如果要设置的长度大于当前已分配的内存空间的字节长度，则重新分配内存空间，大小为以下两者较大者：要设置的长度、当前已分配的长度的2倍，并将原有数据拷贝到新的内存空间中；如果要设置的长度小于当前已分配的内存空间的字节长度，也会重新分配内存空间，大小为要设置的长度，并将原有数据从头截断为要设置的长度存入新的内存空间中。</p>\r\n         */\r\n        set length(value: number) {\r\n            if (this._allocated_ < value) this._resizeBuffer(this._allocated_ = Math.floor(Math.max(value, this._allocated_ * 2)));\r\n            else if (this._allocated_ > value) this._resizeBuffer(this._allocated_ = value);\r\n            this._length = value;\r\n        }\r\n\r\n        get length(): number {\r\n            return this._length;\r\n        }\r\n\r\n        /**@private */\r\n        private _resizeBuffer(len: number): void {\r\n            try {\r\n                var newByteView: any = new Uint8Array(len);\r\n                if (this._u8d_ != null) {\r\n                    if (this._u8d_.length <= len) newByteView.set(this._u8d_);\r\n                    else newByteView.set(this._u8d_.subarray(0, len));\r\n                }\r\n                this._u8d_ = newByteView;\r\n                this._d_ = new DataView(newByteView.buffer);\r\n            } catch (err) {\r\n                throw \"Invalid typed array length:\" + len;\r\n            }\r\n        }\r\n\r\n        /**\r\n         * @private\r\n         * <p>常用于解析固定格式的字节流。</p>\r\n         * <p>先从字节流的当前字节偏移位置处读取一个 <code>Uint16</code> 值，然后以此值为长度，读取此长度的字符串。</p>\r\n         * @return 读取的字符串。\r\n         */\r\n        getString(): string {\r\n            return this.readString();\r\n        }\r\n\r\n        /**\r\n         * <p>常用于解析固定格式的字节流。</p>\r\n         * <p>先从字节流的当前字节偏移位置处读取一个 <code>Uint16</code> 值，然后以此值为长度，读取此长度的字符串。</p>\r\n         * @return 读取的字符串。\r\n         */\r\n        readString(): string {\r\n            return this._rUTF(this.getUint16());\r\n        }\r\n\r\n        /**\r\n         * @private\r\n         * <p>从字节流中 <code>start</code> 参数指定的位置开始，读取 <code>len</code> 参数指定的字节数的数据，用于创建一个 <code>Float32Array</code> 对象并返回此对象。</p>\r\n         * <p><b>注意：</b>返回的 Float32Array 对象，在 JavaScript 环境下，是原生的 HTML5 Float32Array 对象，对此对象的读取操作都是基于运行此程序的当前主机字节序，此顺序可能与实际数据的字节序不同，如果使用此对象进行读取，需要用户知晓实际数据的字节序和当前主机字节序，如果相同，可正常读取，否则需要用户对实际数据(Float32Array.buffer)包装一层 DataView ，使用 DataView 对象可按照指定的字节序进行读取。</p>\r\n         * @param\tstart\t开始位置。\r\n         * @param\tlen\t\t需要读取的字节长度。如果要读取的长度超过可读取范围，则只返回可读范围内的值。\r\n         * @return  读取的 Float32Array 对象。\r\n         */\r\n        getFloat32Array(start: number, len: number): any {\r\n            return this.readFloat32Array(start, len);\r\n        }\r\n\r\n        /**\r\n         * 从字节流中 <code>start</code> 参数指定的位置开始，读取 <code>len</code> 参数指定的字节数的数据，用于创建一个 <code>Float32Array</code> 对象并返回此对象。\r\n         * @param\tstart\t开始位置。\r\n         * @param\tlen\t\t需要读取的字节长度。如果要读取的长度超过可读取范围，则只返回可读范围内的值。\r\n         * @return  读取的 Float32Array 对象。\r\n         */\r\n        readFloat32Array(start: number, len: number): any {\r\n            var end: number = start + len;\r\n            end = (end > this._length) ? this._length : end;\r\n            var v: any = new Float32Array(this._d_.buffer.slice(start, end));\r\n            this._pos_ = end;\r\n            return v;\r\n        }\r\n\r\n        /**\r\n         * @private\r\n         * 从字节流中 <code>start</code> 参数指定的位置开始，读取 <code>len</code> 参数指定的字节数的数据，用于创建一个 <code>Uint8Array</code> 对象并返回此对象。\r\n         * @param\tstart\t开始位置。\r\n         * @param\tlen\t\t需要读取的字节长度。如果要读取的长度超过可读取范围，则只返回可读范围内的值。\r\n         * @return  读取的 Uint8Array 对象。\r\n         */\r\n        getUint8Array(start: number, len: number): Uint8Array {\r\n            return this.readUint8Array(start, len);\r\n        }\r\n\r\n        /**\r\n         * 从字节流中 <code>start</code> 参数指定的位置开始，读取 <code>len</code> 参数指定的字节数的数据，用于创建一个 <code>Uint8Array</code> 对象并返回此对象。\r\n         * @param\tstart\t开始位置。\r\n         * @param\tlen\t\t需要读取的字节长度。如果要读取的长度超过可读取范围，则只返回可读范围内的值。\r\n         * @return  读取的 Uint8Array 对象。\r\n         */\r\n        readUint8Array(start: number, len: number): Uint8Array {\r\n            var end: number = start + len;\r\n            end = (end > this._length) ? this._length : end;\r\n            var v: any = new Uint8Array(this._d_.buffer.slice(start, end));\r\n            this._pos_ = end;\r\n            return v;\r\n        }\r\n\r\n        /**\r\n         * @private\r\n         * <p>从字节流中 <code>start</code> 参数指定的位置开始，读取 <code>len</code> 参数指定的字节数的数据，用于创建一个 <code>Int16Array</code> 对象并返回此对象。</p>\r\n         * <p><b>注意：</b>返回的 Int16Array 对象，在 JavaScript 环境下，是原生的 HTML5 Int16Array 对象，对此对象的读取操作都是基于运行此程序的当前主机字节序，此顺序可能与实际数据的字节序不同，如果使用此对象进行读取，需要用户知晓实际数据的字节序和当前主机字节序，如果相同，可正常读取，否则需要用户对实际数据(Int16Array.buffer)包装一层 DataView ，使用 DataView 对象可按照指定的字节序进行读取。</p>\r\n         * @param\tstart\t开始读取的字节偏移量位置。\r\n         * @param\tlen\t\t需要读取的字节长度。如果要读取的长度超过可读取范围，则只返回可读范围内的值。\r\n         * @return  读取的 Int16Array 对象。\r\n         */\r\n        getInt16Array(start: number, len: number): any {\r\n            return this.readInt16Array(start, len);\r\n        }\r\n\r\n        /**\r\n         * 从字节流中 <code>start</code> 参数指定的位置开始，读取 <code>len</code> 参数指定的字节数的数据，用于创建一个 <code>Int16Array</code> 对象并返回此对象。\r\n         * @param\tstart\t开始读取的字节偏移量位置。\r\n         * @param\tlen\t\t需要读取的字节长度。如果要读取的长度超过可读取范围，则只返回可读范围内的值。\r\n         * @return  读取的 Uint8Array 对象。\r\n         */\r\n        readInt16Array(start: number, len: number): any {\r\n            var end: number = start + len;\r\n            end = (end > this._length) ? this._length : end;\r\n            var v: any = new Int16Array(this._d_.buffer.slice(start, end));\r\n            this._pos_ = end;\r\n            return v;\r\n        }\r\n\r\n        /**\r\n         * @private\r\n         * 从字节流的当前字节偏移位置处读取一个 IEEE 754 单精度（32 位）浮点数。\r\n         * @return 单精度（32 位）浮点数。\r\n         */\r\n        getFloat32(): number {\r\n            return this.readFloat32();\r\n        }\r\n\r\n        /**\r\n         * 从字节流的当前字节偏移位置处读取一个 IEEE 754 单精度（32 位）浮点数。\r\n         * @return 单精度（32 位）浮点数。\r\n         */\r\n        readFloat32(): number {\r\n            if (this._pos_ + 4 > this._length) throw \"getFloat32 error - Out of bounds\";\r\n            var v: number = this._d_.getFloat32(this._pos_, this._xd_);\r\n            this._pos_ += 4;\r\n            return v;\r\n        }\r\n\r\n        /**\r\n         * @private\r\n         * 从字节流的当前字节偏移量位置处读取一个 IEEE 754 双精度（64 位）浮点数。\r\n         * @return 双精度（64 位）浮点数。\r\n         */\r\n        getFloat64(): number {\r\n            return this.readFloat64();\r\n        }\r\n\r\n        /**\r\n         * 从字节流的当前字节偏移量位置处读取一个 IEEE 754 双精度（64 位）浮点数。\r\n         * @return 双精度（64 位）浮点数。\r\n         */\r\n        readFloat64(): number {\r\n            if (this._pos_ + 8 > this._length) throw \"getFloat64 error - Out of bounds\";\r\n            var v: number = this._d_.getFloat64(this._pos_, this._xd_);\r\n            this._pos_ += 8;\r\n            return v;\r\n        }\r\n\r\n        /**\r\n         * 在字节流的当前字节偏移量位置处写入一个 IEEE 754 单精度（32 位）浮点数。\r\n         * @param\tvalue\t单精度（32 位）浮点数。\r\n         */\r\n        writeFloat32(value: number): void {\r\n            this._ensureWrite(this._pos_ + 4);\r\n            this._d_.setFloat32(this._pos_, value, this._xd_);\r\n            this._pos_ += 4;\r\n        }\r\n\r\n        /**\r\n         * 在字节流的当前字节偏移量位置处写入一个 IEEE 754 双精度（64 位）浮点数。\r\n         * @param\tvalue\t双精度（64 位）浮点数。\r\n         */\r\n        writeFloat64(value: number): void {\r\n            this._ensureWrite(this._pos_ + 8);\r\n            this._d_.setFloat64(this._pos_, value, this._xd_);\r\n            this._pos_ += 8;\r\n        }\r\n\r\n        /**\r\n         * @private\r\n         * 从字节流的当前字节偏移量位置处读取一个 Int32 值。\r\n         * @return Int32 值。\r\n         */\r\n        getInt32(): number {\r\n            return this.readInt32();\r\n        }\r\n\r\n        /**\r\n         * 从字节流的当前字节偏移量位置处读取一个 Int32 值。\r\n         * @return Int32 值。\r\n         */\r\n        readInt32(): number {\r\n            if (this._pos_ + 4 > this._length) throw \"getInt32 error - Out of bounds\";\r\n            var float: number = this._d_.getInt32(this._pos_, this._xd_);\r\n            this._pos_ += 4;\r\n            return float;\r\n        }\r\n\r\n        /**\r\n         * @private\r\n         * 从字节流的当前字节偏移量位置处读取一个 Uint32 值。\r\n         * @return Uint32 值。\r\n         */\r\n        getUint32(): number {\r\n            return this.readUint32();\r\n        }\r\n\r\n        /**\r\n         * 从字节流的当前字节偏移量位置处读取一个 Uint32 值。\r\n         * @return Uint32 值。\r\n         */\r\n        readUint32(): number {\r\n            if (this._pos_ + 4 > this._length) throw \"getUint32 error - Out of bounds\";\r\n            var v: number = this._d_.getUint32(this._pos_, this._xd_);\r\n            this._pos_ += 4;\r\n            return v;\r\n        }\r\n\r\n        /**\r\n         * 在字节流的当前字节偏移量位置处写入指定的 Int32 值。\r\n         * @param\tvalue\t需要写入的 Int32 值。\r\n         */\r\n        writeInt32(value: number): void {\r\n            this._ensureWrite(this._pos_ + 4);\r\n            this._d_.setInt32(this._pos_, value, this._xd_);\r\n            this._pos_ += 4;\r\n        }\r\n\r\n        /**\r\n         * 在字节流的当前字节偏移量位置处写入 Uint32 值。\r\n         * @param\tvalue\t需要写入的 Uint32 值。\r\n         */\r\n        writeUint32(value: number): void {\r\n            this._ensureWrite(this._pos_ + 4);\r\n            this._d_.setUint32(this._pos_, value, this._xd_);\r\n            this._pos_ += 4;\r\n        }\r\n\r\n        /**\r\n         * @private\r\n         * 从字节流的当前字节偏移量位置处读取一个 Int16 值。\r\n         * @return Int16 值。\r\n         */\r\n        getInt16(): number {\r\n            return this.readInt16();\r\n        }\r\n\r\n        /**\r\n         * 从字节流的当前字节偏移量位置处读取一个 Int16 值。\r\n         * @return Int16 值。\r\n         */\r\n        readInt16(): number {\r\n            if (this._pos_ + 2 > this._length) throw \"getInt16 error - Out of bounds\";\r\n            var us: number = this._d_.getInt16(this._pos_, this._xd_);\r\n            this._pos_ += 2;\r\n            return us;\r\n        }\r\n\r\n        /**\r\n         * @private\r\n         * 从字节流的当前字节偏移量位置处读取一个 Uint16 值。\r\n         * @return Uint16 值。\r\n         */\r\n        getUint16(): number {\r\n            return this.readUint16();\r\n        }\r\n\r\n        /**\r\n         * 从字节流的当前字节偏移量位置处读取一个 Uint16 值。\r\n         * @return Uint16 值。\r\n         */\r\n        readUint16(): number {\r\n            if (this._pos_ + 2 > this._length) throw \"getUint16 error - Out of bounds\";\r\n            var us: number = this._d_.getUint16(this._pos_, this._xd_);\r\n            this._pos_ += 2;\r\n            return us;\r\n        }\r\n\r\n        /**\r\n         * 在字节流的当前字节偏移量位置处写入指定的 Uint16 值。\r\n         * @param\tvalue\t需要写入的Uint16 值。\r\n         */\r\n        writeUint16(value: number): void {\r\n            this._ensureWrite(this._pos_ + 2);\r\n            this._d_.setUint16(this._pos_, value, this._xd_);\r\n            this._pos_ += 2;\r\n        }\r\n\r\n        /**\r\n         * 在字节流的当前字节偏移量位置处写入指定的 Int16 值。\r\n         * @param\tvalue\t需要写入的 Int16 值。\r\n         */\r\n        writeInt16(value: number): void {\r\n            this._ensureWrite(this._pos_ + 2);\r\n            this._d_.setInt16(this._pos_, value, this._xd_);\r\n            this._pos_ += 2;\r\n        }\r\n\r\n        /**\r\n         * @private\r\n         * 从字节流的当前字节偏移量位置处读取一个 Uint8 值。\r\n         * @return Uint8 值。\r\n         */\r\n        getUint8(): number {\r\n            return this.readUint8();\r\n        }\r\n\r\n        /**\r\n         * 从字节流的当前字节偏移量位置处读取一个 Uint8 值。\r\n         * @return Uint8 值。\r\n         */\r\n        readUint8(): number {\r\n            if (this._pos_ + 1 > this._length) throw \"getUint8 error - Out of bounds\";\r\n            return this._u8d_[this._pos_++];\r\n        }\r\n\r\n        /**\r\n         * 在字节流的当前字节偏移量位置处写入指定的 Uint8 值。\r\n         * @param\tvalue\t需要写入的 Uint8 值。\r\n         */\r\n        writeUint8(value: number): void {\r\n            this._ensureWrite(this._pos_ + 1);\r\n            this._d_.setUint8(this._pos_, value);\r\n            this._pos_++;\r\n        }\r\n\r\n        /**\r\n         * @internal\r\n         * 从字节流的指定字节偏移量位置处读取一个 Uint8 值。\r\n         * @param\tpos\t字节读取位置。\r\n         * @return Uint8 值。\r\n         */\r\n        //TODO:coverage\r\n        _getUInt8(pos: number): number {\r\n            return this._readUInt8(pos);\r\n        }\r\n\r\n        /**\r\n         * @internal\r\n         * 从字节流的指定字节偏移量位置处读取一个 Uint8 值。\r\n         * @param\tpos\t字节读取位置。\r\n         * @return Uint8 值。\r\n         */\r\n        //TODO:coverage\r\n        _readUInt8(pos: number): number {\r\n            return this._d_.getUint8(pos);\r\n        }\r\n\r\n        /**\r\n         * @internal\r\n         * 从字节流的指定字节偏移量位置处读取一个 Uint16 值。\r\n         * @param\tpos\t字节读取位置。\r\n         * @return Uint16 值。\r\n         */\r\n        //TODO:coverage\r\n        _getUint16(pos: number): number {\r\n            return this._readUint16(pos);\r\n        }\r\n\r\n        /**\r\n         * @internal\r\n         * 从字节流的指定字节偏移量位置处读取一个 Uint16 值。\r\n         * @param\tpos\t字节读取位置。\r\n         * @return Uint16 值。\r\n         */\r\n        //TODO:coverage\r\n        _readUint16(pos: number): number {\r\n            return this._d_.getUint16(pos, this._xd_);\r\n        }\r\n\r\n        /**\r\n         * @internal\r\n         * 使用 getFloat32() 读取6个值，用于创建并返回一个 Matrix 对象。\r\n         * @return  Matrix 对象。\r\n         */\r\n        //TODO:coverage\r\n        _getMatrix(): JTMatrix {\r\n            return this._readMatrix();\r\n        }\r\n\r\n        /**\r\n         * @internal\r\n         * 使用 getFloat32() 读取6个值，用于创建并返回一个 Matrix 对象。\r\n         * @return  Matrix 对象。\r\n         */\r\n        //TODO:coverage\r\n        _readMatrix(): JTMatrix {\r\n            var rst: JTMatrix = new JTMatrix(this.getFloat32(), this.getFloat32(), this.getFloat32(), this.getFloat32(), this.getFloat32(), this.getFloat32());\r\n            return rst;\r\n        }\r\n\r\n        /**\r\n         * @private\r\n         * 读取指定长度的 UTF 型字符串。\r\n         * @param\tlen 需要读取的长度。\r\n         * @return 读取的字符串。\r\n         */\r\n        private _rUTF(len: number): string {\r\n            var v: string = \"\", max: number = this._pos_ + len, c: number, c2: number, c3: number, f: Function = String.fromCharCode;\r\n            var u: any = this._u8d_, i: number = 0;\r\n            var strs: any[] = [];\r\n            var n: number = 0;\r\n            strs.length = 1000;\r\n            while (this._pos_ < max) {\r\n                c = u[this._pos_++];\r\n                if (c < 0x80) {\r\n                    if (c != 0)\r\n                        //v += f(c);\\\r\n                        strs[n++] = f(c);\r\n                } else if (c < 0xE0) {\r\n                    //v += f(((c & 0x3F) << 6) | (u[_pos_++] & 0x7F));\r\n                    strs[n++] = f(((c & 0x3F) << 6) | (u[this._pos_++] & 0x7F));\r\n                } else if (c < 0xF0) {\r\n                    c2 = u[this._pos_++];\r\n                    //v += f(((c & 0x1F) << 12) | ((c2 & 0x7F) << 6) | (u[_pos_++] & 0x7F));\r\n                    strs[n++] = f(((c & 0x1F) << 12) | ((c2 & 0x7F) << 6) | (u[this._pos_++] & 0x7F));\r\n                } else {\r\n                    c2 = u[this._pos_++];\r\n                    c3 = u[this._pos_++];\r\n                    //v += f(((c & 0x0F) << 18) | ((c2 & 0x7F) << 12) | ((c3 << 6) & 0x7F) | (u[_pos_++] & 0x7F));\r\n                    const _code = ((c & 0x0F)<< 18)| ((c2 & 0x7F)<< 12)| ((c3 & 0x7F)<< 6)| (u[this._pos_++] & 0x7F);\r\n                    if( _code >= 0x10000 )\r\n                    {\r\n                        const _offset = _code - 0x10000;\r\n                        const _lead = 0xd800 | (_offset >> 10);\r\n                        const _trail = 0xdc00 | (_offset & 0x3ff);\r\n                        strs[n++]=f(_lead);\r\n                        strs[n++]=f(_trail);\r\n                    }\r\n                    else\r\n                    {\r\n                        strs[n++]=f(_code);\r\n                    }\r\n                }\r\n                i++;\r\n            }\r\n            strs.length = n;\r\n            return strs.join('');\r\n            //return v;\r\n        }\r\n\r\n        /**\r\n         * @private\r\n         * 读取 <code>len</code> 参数指定的长度的字符串。\r\n         * @param\tlen\t要读取的字符串的长度。\r\n         * @return 指定长度的字符串。\r\n         */\r\n        //TODO:coverage\r\n        getCustomString(len: number): string {\r\n            return this.readCustomString(len);\r\n        }\r\n\r\n        /**\r\n         * @private\r\n         * 读取 <code>len</code> 参数指定的长度的字符串。\r\n         * @param\tlen\t要读取的字符串的长度。\r\n         * @return 指定长度的字符串。\r\n         */\r\n        //TODO:coverage\r\n        readCustomString(len: number): string {\r\n            var v: string = \"\", ulen: number = 0, c: number, c2: number, f: Function = String.fromCharCode;\r\n            var u: any = this._u8d_, i: number = 0;\r\n            while (len > 0) {\r\n                c = u[this._pos_];\r\n                if (c < 0x80) {\r\n                    v += f(c);\r\n                    this._pos_++;\r\n                    len--;\r\n                } else {\r\n                    ulen = c - 0x80;\r\n                    this._pos_++;\r\n                    len -= ulen;\r\n                    while (ulen > 0) {\r\n                        c = u[this._pos_++];\r\n                        c2 = u[this._pos_++];\r\n                        v += f((c2 << 8) | c);\r\n                        ulen--;\r\n                    }\r\n                }\r\n            }\r\n\r\n            return v;\r\n        }\r\n\r\n        /**\r\n         * 移动或返回 Byte 对象的读写指针的当前位置（以字节为单位）。下一次调用读取方法时将在此位置开始读取，或者下一次调用写入方法时将在此位置开始写入。\r\n         */\r\n        get pos(): number {\r\n            return this._pos_;\r\n        }\r\n\r\n        set pos(value: number) {\r\n            this._pos_ = value;\r\n            //$MOD byteOffset是只读的，这里进行赋值没有意义。\r\n            //_d_.byteOffset = value;\r\n        }\r\n\r\n        /**\r\n         * 可从字节流的当前位置到末尾读取的数据的字节数。\r\n         */\r\n        get bytesAvailable(): number {\r\n            return this._length - this._pos_;\r\n        }\r\n\r\n        /**\r\n         * 清除字节数组的内容，并将 length 和 pos 属性重置为 0。调用此方法将释放 Byte 实例占用的内存。\r\n         */\r\n        clear(): void {\r\n            this._pos_ = 0;\r\n            this.length = 0;\r\n        }\r\n\r\n        /**\r\n         * @internal\r\n         * 获取此对象的 ArrayBuffer 引用。\r\n         * @return\r\n         */\r\n        __getBuffer(): ArrayBuffer {\r\n            //this._d_.buffer.byteLength = this.length;\r\n            return this._d_.buffer;\r\n        }\r\n\r\n        /**\r\n         * <p>将 UTF-8 字符串写入字节流。类似于 writeUTF() 方法，但 writeUTFBytes() 不使用 16 位长度的字为字符串添加前缀。</p>\r\n         * <p>对应的读取方法为： getUTFBytes 。</p>\r\n         * @param value 要写入的字符串。\r\n         */\r\n        writeUTFBytes(value: string): void {\r\n            // utf8-decode\r\n            value = value + \"\";\r\n            for (var i: number = 0, sz: number = value.length; i < sz; i++) {\r\n                var c: number = value.charCodeAt(i);\r\n\r\n                if (c <= 0x7F) {\r\n                    this.writeByte(c);\r\n                } else if (c <= 0x7FF) {\r\n                    //优化为直接写入多个字节，而不必重复调用writeByte，免去额外的调用和逻辑开销。\r\n                    this._ensureWrite(this._pos_ + 2);\r\n                    this._u8d_.set([0xC0 | (c >> 6), 0x80 | (c & 0x3F)], this._pos_);\r\n                    this._pos_ += 2;\r\n                } else if (c >= 0xD800 && c <=0xDBFF){\r\n                    i++;\r\n                    const c2=value.charCodeAt(i);\r\n                    if( !isNaN(c2) && c2>=0xDC00 && c2<=0xDFFF )\r\n                    {\r\n                        const _p1 = (c & 0x3FF) + 0x40;\r\n                        const _p2 = c2 & 0x3FF;\r\n\r\n                        const _b1 = 0xF0 | ((_p1>>8) & 0x3F);\r\n                        const _b2 = 0x80 | ((_p1>>2) & 0x3F);\r\n                        const _b3 = 0x80 | ((_p1 & 0x3)<<4) | ((_p2>>6) & 0xF);\r\n                        const _b4 = 0x80 | (_p2 & 0x3F);\r\n\r\n                        this._ensureWrite(this._pos_+4);\r\n                        this._u8d_.set([_b1, _b2, _b3, _b4],this._pos_);\r\n                        this._pos_+=4;\r\n                    }\r\n                } else if (c <= 0xFFFF) {\r\n                    this._ensureWrite(this._pos_ + 3);\r\n                    this._u8d_.set([0xE0 | (c >> 12), 0x80 | ((c >> 6) & 0x3F), 0x80 | (c & 0x3F)], this._pos_);\r\n                    this._pos_ += 3;\r\n                } else {\r\n                    this._ensureWrite(this._pos_ + 4);\r\n                    this._u8d_.set([0xF0 | (c >> 18), 0x80 | ((c >> 12) & 0x3F), 0x80 | ((c >> 6) & 0x3F), 0x80 | (c & 0x3F)], this._pos_);\r\n                    this._pos_ += 4;\r\n                }\r\n            }\r\n        }\r\n\r\n        /**\r\n         * <p>将 UTF-8 字符串写入字节流。先写入以字节表示的 UTF-8 字符串长度（作为 16 位整数），然后写入表示字符串字符的字节。</p>\r\n         * <p>对应的读取方法为： getUTFString 。</p>\r\n         * @param\tvalue 要写入的字符串值。\r\n         */\r\n        writeUTFString(value: string): void {\r\n            var tPos: number = this.pos;\r\n            this.writeUint16(1);\r\n            this.writeUTFBytes(value);\r\n            var dPos: number = this.pos - tPos - 2;\r\n            //trace(\"writeLen:\",dPos,\"pos:\",tPos);\r\n            this._d_.setUint16(tPos, dPos, this._xd_);\r\n        }\r\n        \r\n        /**\r\n         * <p>将 UTF-8 字符串写入字节流。先写入以字节表示的 UTF-8 字符串长度（作为 32 位整数），然后写入表示字符串字符的字节。</p>\r\n         * @param\tvalue 要写入的字符串值。\r\n         */\r\n        writeUTFString32(value:string):void {\r\n            var tPos = this.pos;\r\n            this.writeUint32(1);\r\n            this.writeUTFBytes(value);\r\n            var dPos = this.pos - tPos - 4;\r\n            //trace(\"writeLen:\",dPos,\"pos:\",tPos);\r\n            this._d_.setUint32(tPos, dPos, this._xd_);\r\n        }\r\n\r\n\r\n        /**\r\n         * @private\r\n         * 读取 UTF-8 字符串。\r\n         * @return 读取的字符串。\r\n         */\r\n        readUTFString(): string {\r\n            //var tPos:int = pos;\r\n            //var len:int = getUint16();\r\n            ////trace(\"readLen:\"+len,\"pos,\",tPos);\r\n            return this.readUTFBytes(this.getUint16());\r\n        }\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        readUTFString32():string {\r\n            return this.readUTFBytes(this.getUint32());\r\n        }\r\n\r\n        /**\r\n         * <p>从字节流中读取一个 UTF-8 字符串。假定字符串的前缀是一个无符号的短整型（以此字节表示要读取的长度）。</p>\r\n         * <p>对应的写入方法为： writeUTFString 。</p>\r\n         * @return 读取的字符串。\r\n         */\r\n        getUTFString(): string {\r\n            return this.readUTFString();\r\n        }\r\n\r\n        /**\r\n         * @private\r\n         * 读字符串，必须是 writeUTFBytes 方法写入的字符串。\r\n         * @param len\t要读的buffer长度，默认将读取缓冲区全部数据。\r\n         * @return 读取的字符串。\r\n         */\r\n        readUTFBytes(len: number = -1): string {\r\n            if (len === 0) return \"\";\r\n            var lastBytes: number = this.bytesAvailable;\r\n            if (len > lastBytes) throw \"readUTFBytes error - Out of bounds\";\r\n            len = len > 0 ? len : lastBytes;\r\n            return this._rUTF(len);\r\n        }\r\n\r\n        /**\r\n         * <p>从字节流中读取一个由 length 参数指定的长度的 UTF-8 字节序列，并返回一个字符串。</p>\r\n         * <p>一般读取的是由 writeUTFBytes 方法写入的字符串。</p>\r\n         * @param len\t要读的buffer长度，默认将读取缓冲区全部数据。\r\n         * @return 读取的字符串。\r\n         */\r\n        getUTFBytes(len: number = -1): string {\r\n            return this.readUTFBytes(len);\r\n        }\r\n\r\n        /**\r\n         * <p>在字节流中写入一个字节。</p>\r\n         * <p>使用参数的低 8 位。忽略高 24 位。</p>\r\n         * @param\tvalue\r\n         */\r\n        writeByte(value: number): void {\r\n            this._ensureWrite(this._pos_ + 1);\r\n            this._d_.setInt8(this._pos_, value);\r\n            this._pos_ += 1;\r\n        }\r\n\r\n        /**\r\n         * <p>从字节流中读取带符号的字节。</p>\r\n         * <p>返回值的范围是从 -128 到 127。</p>\r\n         * @return 介于 -128 和 127 之间的整数。\r\n         */\r\n        readByte(): number {\r\n            if (this._pos_ + 1 > this._length) throw \"readByte error - Out of bounds\";\r\n            return this._d_.getInt8(this._pos_++);\r\n        }\r\n\r\n        /**\r\n         * @private\r\n         * 从字节流中读取带符号的字节。\r\n         */\r\n        getByte(): number {\r\n            return this.readByte();\r\n        }\r\n\r\n        /**\r\n         * @internal\r\n         * <p>保证该字节流的可用长度不小于 <code>lengthToEnsure</code> 参数指定的值。</p>\r\n         * @param\tlengthToEnsure\t指定的长度。\r\n         */\r\n        _ensureWrite(lengthToEnsure: number): void {\r\n            if (this._length < lengthToEnsure) this._length = lengthToEnsure;\r\n            if (this._allocated_ < lengthToEnsure) this.length = lengthToEnsure;\r\n        }\r\n\r\n        /**\r\n         * <p>将指定 arraybuffer 对象中的以 offset 为起始偏移量， length 为长度的字节序列写入字节流。</p>\r\n         * <p>如果省略 length 参数，则使用默认长度 0，该方法将从 offset 开始写入整个缓冲区；如果还省略了 offset 参数，则写入整个缓冲区。</p>\r\n         * <p>如果 offset 或 length 小于0，本函数将抛出异常。</p>\r\n         * @param\tarraybuffer\t需要写入的 Arraybuffer 对象。\r\n         * @param\toffset\t\tArraybuffer 对象的索引的偏移量（以字节为单位）\r\n         * @param\tlength\t\t从 Arraybuffer 对象写入到 Byte 对象的长度（以字节为单位）\r\n         */\r\n        writeArrayBuffer(arraybuffer: any, offset: number = 0, length: number = 0): void {\r\n            if (offset < 0 || length < 0) throw \"writeArrayBuffer error - Out of bounds\";\r\n            if (length == 0) length = arraybuffer.byteLength - offset;\r\n            this._ensureWrite(this._pos_ + length);\r\n            var uint8array: any = new Uint8Array(arraybuffer);\r\n            this._u8d_.set(uint8array.subarray(offset, offset + length), this._pos_);\r\n            this._pos_ += length;\r\n        }\r\n\r\n        /**\r\n         * 读取ArrayBuffer数据\r\n         * @param\tlength\r\n         * @return\r\n         */\r\n        readArrayBuffer(length: number): ArrayBuffer {\r\n            var rst: ArrayBuffer;\r\n            rst = this._u8d_.buffer.slice(this._pos_, this._pos_ + length);\r\n            this._pos_ = this._pos_ + length\r\n            return rst;\r\n        }\r\n    }\r\n}\r\n"]}