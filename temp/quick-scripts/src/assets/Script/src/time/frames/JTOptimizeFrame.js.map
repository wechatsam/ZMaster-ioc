{"version":3,"sources":["assets\\Script\\src\\time\\frames\\JTOptimizeFrame.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;IAGA,IAAU,GAAG,CAgGZ;IAhGD,WAAU,GAAG;QAET;YAAqC,mCAAW;YAE5C;uBAEI,iBAAO;YACX,CAAC;YAEM,+BAAK,GAAZ,UAAa,WAAkB,EAAE,IAAe,EAAE,SAAqB;gBAAtC,qBAAA,EAAA,QAAe;gBAAE,0BAAA,EAAA,cAAqB;gBAEjE,iBAAM,KAAK,YAAC,WAAW,EAAE,IAAI,CAAC,CAAC;YACrC,CAAC;YAEM,8BAAI,GAAX,UAAY,WAAkB,EAAE,IAAe,EAAE,SAAqB;gBAAtC,qBAAA,EAAA,QAAe;gBAAE,0BAAA,EAAA,cAAqB;gBAElE,iBAAM,IAAI,YAAC,WAAW,EAAE,IAAI,CAAC,CAAA;YACjC,CAAC;YAEM,oCAAU,GAAjB,UAAkB,IAAW;gBAEzB,IAAI,CAAC,YAAY,IAAI,IAAI,CAAC;gBAC1B,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;gBACxC,iBAAM,UAAU,YAAC,IAAI,CAAC,CAAC;YAC3B,CAAC;YAES,yCAAe,GAAzB,UAA0B,KAAY;gBAElC,IAAI,WAAW,GAAU,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,uBAAuB,CAAC,CAAC;gBACtF,IAAI,GAAG,GAAU,IAAI,CAAC,GAAG,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC;gBAC1C,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,kBAAkB,GAAG,CAAC,GAAG,GAAG,EAAE,CAAC,CAAC;gBACvD,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,UAAU,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC;gBAC5D,iBAAM,eAAe,YAAC,IAAI,CAAC,UAAU,CAAC,CAAC;YAwC3C,CAAC;YAQS,6BAAG,GAAb,UAAc,GAAU,EAAE,KAAY;gBAEjC,GAAG,GAAG,CAAC,GAAG,GAAG,KAAK,CAAC,CAAA;gBACpB,IAAI,KAAK,GAAU,CAAC,CAAA;gBACpB,OAAM,GAAG,GAAG,CAAC,EACb;oBACI,KAAK,EAAG,CAAC;oBACT,IAAI,GAAG,IAAI,CAAC,EACZ;wBACI,GAAG,GAAG,GAAG,GAAG,KAAK,CAAA;qBACpB;;wBACI,MAAM;iBACd;gBACD,OAAO,KAAK,CAAC;YACjB,CAAC;YACL,sBAAC;QAAD,CA7FA,AA6FC,CA7FoC,WAAW,GA6F/C;QA7FY,mBAAe,kBA6F3B,CAAA;IACL,CAAC,EAhGS,GAAG,KAAH,GAAG,QAgGZ","file":"","sourceRoot":"/","sourcesContent":["/**\r\n * 根据系统时间延迟情况自动调整帧频并做跳帧数处理，保持最新的一帧数，大大降低了CPU的负荷...\r\n */\r\nnamespace com \r\n{\r\n    export class JTOptimizeFrame extends JTJumpFrame\r\n    {\r\n        constructor()\r\n        {\r\n            super();\r\n        }\r\n\r\n        public setup(totalFrames:number, loop:number = 0, frameRate:number = 60):void\r\n        {\r\n              super.setup(totalFrames, loop);//使用60帧数\r\n        }\r\n\r\n        public play(totalFrames:number, loop:number = 0, frameRate:number = 60):void\r\n        {\r\n            super.play(totalFrames, loop)//使用60帧数\r\n        }\r\n\r\n        public updateTick(tick:number):void \r\n        {\r\n            this._currentTick += tick;\r\n            this.adjustFrameRate(this._currentTick);\r\n            super.updateTick(tick);\r\n        }\r\n\r\n        protected adjustFrameRate(value:number):void\r\n        {\r\n            let delayFrames:number = Math.floor(this._currentTick / this.DEFAULT_FRAME_RATE_TIME);\r\n            let val:number = this.sqr(delayFrames, 2);\r\n            this._frameRate = this.DEFAULT_FRAME_RATE - (val * 10);\r\n            this._frameRate = this._frameRate < 1 ? 1 : this._frameRate;\r\n            super.adjustFrameRate(this._frameRate);\r\n            // switch(true)\r\n            // {\r\n            //     case tick <= 64 : //最高延迟4帧----60帧频的情况下4帧约是64毫秒(1000 / 60) = 16, 16 * 4 = 64(毫秒)\r\n            //     {\r\n            //         this._frameRate = 60\r\n            //         break;\r\n            //     }\r\n            //     case tick <= 128 ://最高延迟8帧----60帧频的情况下8帧约是128毫秒，以50帧频运行\r\n            //     {\r\n            //         this._frameRate = 50\r\n            //         break;\r\n            //     }\r\n            //     case tick <= 256 ://最高延迟16帧----60帧频的情况下8帧约是256毫秒，以40帧频运行\r\n            //     {\r\n            //         this._frameRate = 40;\r\n            //         break;\r\n            //     }\r\n            //     case tick <= 512 ://最高延迟32帧----60帧频的情况下8帧约是512毫秒，以30帧频运行\r\n            //     {\r\n            //         this._frameRate = 30;\r\n            //         break;\r\n            //     }\r\n            //     case tick <= 1024 ://,,...........\r\n            //     {\r\n            //         this._frameRate = 20;\r\n            //         break;\r\n            //     }\r\n            //     case tick <= 2048 ://,,...........\r\n            //     {\r\n            //         this._frameRate = 10;\r\n            //         break;\r\n            //     }\r\n            //     default :\r\n            //     {\r\n            //         //已经超出最大延迟了\r\n            //         break;\r\n            //     }\r\n            // }\r\n            // this._interval = Math.floor(this.SECOND_INTERVAL / this._frameRate);            \r\n        }\r\n\r\n        /**\r\n         * 开平方根\r\n         * @param num \r\n         * @param value \r\n         * @returns \r\n         */\r\n        protected sqr(num:number, value:number)\r\n        {\r\n             num = (num / value)\r\n            let count:number = 1 //默认为1\r\n            while(num > 0)\r\n            {   \r\n                count ++;\r\n                if (num >= 1)\r\n                {\r\n                    num = num / value\r\n                }\r\n                else break;//不足1次方计算，直接默认+1，中断循环\r\n            }\r\n            return count;\r\n        }\r\n    }\r\n}\r\n"]}