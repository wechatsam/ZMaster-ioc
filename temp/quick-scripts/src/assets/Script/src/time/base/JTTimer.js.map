{"version":3,"sources":["assets\\Script\\src\\time\\base\\JTTimer.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;IACA,IAAU,GAAG,CAkEZ;IAlED,WAAU,GAAG;QAET;YAA6B,2BAAW;YAEpC,iBAAY,QAAmB,EAAE,IAAe;gBAApC,yBAAA,EAAA,YAAmB;gBAAE,qBAAA,EAAA,QAAe;uBAE5C,kBAAM,QAAQ,EAAE,IAAI,CAAC;YACzB,CAAC;YAEM,uBAAK,GAAZ,UAAa,QAAe,EAAE,IAAe;gBAAf,qBAAA,EAAA,QAAe;gBAEzC,IAAI,CAAC,KAAK,EAAE,CAAC;gBACb,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;gBACxB,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;YAC9B,CAAC;YAEM,uBAAK,GAAZ;gBAEK,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;gBACrB,WAAW,CAAC,YAAY,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;YAC5C,CAAC;YAEM,sBAAI,GAAX;gBAEI,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;YAC1B,CAAC;YAED,sBAAW,+BAAU;qBAArB;oBAEI,OAAO,IAAI,CAAC,WAAW,CAAC;gBAC5B,CAAC;;;eAAA;YAED,sBAAW,iCAAY;qBAAvB;oBAEI,OAAO,IAAI,CAAC,aAAa,CAAC;gBAC9B,CAAC;qBAED,UAAwB,KAAY;oBAEhC,IAAI,CAAC,aAAa,GAAG,KAAK,CAAC;gBAC/B,CAAC;;;eALA;YAOD,sBAAW,6BAAQ;qBAAnB;oBAEI,OAAO,IAAI,CAAC,SAAS,CAAC;gBAC1B,CAAC;qBAED,UAAoB,KAAY;oBAE5B,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;gBAC3B,CAAC;;;eALA;YAOa,cAAM,GAApB,UAAqB,QAAe,EAAE,IAAW;gBAE7C,IAAI,KAAK,GAAY,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,GAAG,EAAc,CAAC;gBAChE,KAAK,CAAC,KAAK,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;gBAC5B,OAAO,KAAK,CAAC;YACjB,CAAC;YAEa,WAAG,GAAjB,UAAkB,KAAc;gBAE5B,WAAW,CAAC,YAAY,CAAC,UAAU,CAAC,KAAY,CAAC,CAAC;gBAClD,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,KAAiB,CAAC,CAAC;YACpD,CAAC;YACL,cAAC;QAAD,CA9DA,AA8DC,CA9D4B,WAAW,GA8DvC;QA9DY,WAAO,UA8DnB,CAAA;IAEL,CAAC,EAlES,GAAG,KAAH,GAAG,QAkEZ","file":"","sourceRoot":"/","sourcesContent":["///<reference path=\"JTTimerTask.ts\"/>\r\nnamespace com \r\n{\r\n    export class JTTimer extends JTTimerTask implements JTITimer\r\n    {\r\n        constructor(interval:number = 0, loop:number = 0)\r\n        {\r\n            super(interval, loop);\r\n        }\r\n\r\n        public setup(interval:number, loop:number = 0):void\r\n        {\r\n            this.reset();\r\n            this._totalTimes = loop;\r\n            this._interval = interval;\r\n        }\r\n\r\n        public start():void\r\n        {\r\n             this._running = true;\r\n             JTTimerTool.defaultTimer.addTask(this);\r\n        }\r\n\r\n        public stop():void\r\n        {\r\n            this._running = false;\r\n        }\r\n\r\n        public get totalCount():number\r\n        {\r\n            return this._totalTimes;\r\n        }\r\n\r\n        public get currentCount():number\r\n        {\r\n            return this._currentTimes;\r\n        }\r\n\r\n        public set currentCount(value:number)\r\n        {\r\n            this._currentTimes = value;\r\n        }\r\n\r\n        public get interval():number\r\n        {\r\n            return this._interval;\r\n        }\r\n\r\n        public set interval(value:number)\r\n        {\r\n            this._interval = value;\r\n        }\r\n\r\n        public static create(interval:number, loop:number):JTITimer\r\n        {\r\n            let timer:JTITimer = JTPool.instance(JTTimer).get() as JTITimer;\r\n            timer.setup(interval, loop);\r\n            return timer;\r\n        } \r\n\r\n        public static put(timer:JTITimer):void\r\n        {\r\n            JTTimerTool.defaultTimer.removeTask(timer as any);\r\n            JTPool.instance(JTTimer).put(timer as JTITimer);\r\n        }\r\n    }\r\n\r\n}\r\n"]}