{"version":3,"sources":["assets\\Script\\src\\events\\JTFunctionManager.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["namespace com \r\n{\r\n    export class JTFunctionManager\r\n    {\r\n        private static _eventMap:Object = {};\r\n        public static registerFunction(key:number | string, method:Function, caller:any, once?:boolean):void\r\n        {\r\n            var list:JTCommand[] = this._eventMap[key]\r\n            if (list)\r\n            {\r\n                list.forEach(element => \r\n                {\r\n                    if (element && element.method == method && element.caller == caller)\r\n                    {\r\n                        JTLogger.info(\"[JTFunctionManager.registerFunction] The key    \"+ key +\"    function already registered \");\r\n                        return ;\r\n                    }\r\n                });\r\n            }\r\n            else\r\n            {\r\n                list = [];\r\n                this._eventMap[key] = list;\r\n            }\r\n            var command:JTCommand = JTCommand.create(caller, method, null, once);\r\n            list.push(command);\r\n        }\r\n\r\n        public static addCommand(key:number | string, command:JTCommand):void\r\n        {\r\n            var list:JTCommand[] = this._eventMap[key]\r\n            if (list)\r\n            {\r\n                list.forEach(element => \r\n                {\r\n                    if (element && element.method == command.method && element.caller == command.caller)\r\n                    {\r\n                        JTLogger.info(\"[JTFunctionManager.registerFunction] The key    \"+ key +\"    function already registered \");\r\n                        return ;\r\n                    }\r\n                });\r\n            }\r\n            else\r\n            {\r\n                list = [];\r\n                this._eventMap[key] = list;\r\n            }\r\n            list.push(command);\r\n        }\r\n\r\n        public static execute(key:number | string, args?:any):void\r\n        {\r\n            var list:JTCommand[] = this._eventMap[key]\r\n            if (list)\r\n            {\r\n                list.forEach(command => \r\n                {\r\n                    command && command.runWith(args)\r\n                    if (command.once)\r\n                    {\r\n                        this.delete(list, command);\r\n                    }\r\n                    // if (command.once) \r\n                });\r\n            }\r\n            else\r\n            {\r\n                JTLogger.info(\"[JTFunctionManager.execute] Cant find the function by key : \" + key);\r\n            }\r\n        }\r\n\r\n        public static removeFunction(key:number | string, method:Function, caller:any):void\r\n        {\r\n            var list:JTCommand[] =  this._eventMap[key]\r\n            if (list)\r\n            {\r\n                list.forEach(element => \r\n                {\r\n                    if (element && element.method == method && element.caller == caller)\r\n                    {\r\n                        this.delete(list, element);\r\n                    }\r\n                });\r\n                \r\n            }\r\n        }\r\n\r\n        public static removeFunctions(key:number | string):void\r\n        {\r\n            var list:JTCommand[] =  this._eventMap[key]\r\n            if (list)\r\n            {\r\n                list.forEach(element => \r\n                {\r\n                    if (element)\r\n                    {\r\n                        this.delete(list, element);\r\n                    }\r\n                });\r\n                this._eventMap[key] = null;\r\n                delete this._eventMap[key];\r\n            }\r\n        }\r\n\r\n        private static delete(list:JTCommand[], command:JTCommand):void\r\n        {\r\n                var index:number = list.indexOf(command);\r\n                var removes:JTCommand[] = list.splice(index, 1);\r\n                removes.shift();\r\n                JTCommand.put(command);\r\n\r\n        }\r\n    }\r\n}"]}