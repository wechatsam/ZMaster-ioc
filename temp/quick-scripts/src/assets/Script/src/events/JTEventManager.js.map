{"version":3,"sources":["assets\\Script\\src\\events\\JTEventManager.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["namespace com \r\n{\r\n    export class JTEventManager\r\n    {\r\n        protected static __evtMap:Object  = {}\r\n        constructor()\r\n        {\r\n        }\r\n\r\n        public static recycle() \r\n        {\r\n            this.removes();\r\n        }\r\n\r\n        public static addEventListener(key:any, method:Function, caller:any, once?:boolean):void\r\n        {\r\n            var list:JTCommand[] = this.__evtMap[key];\r\n            if (list)\r\n            {\r\n                list.forEach(element => \r\n                {\r\n                    if (element && element.method == method && element.caller == caller)\r\n                    {\r\n                        JTLogger.info(\"[JTEventManager.addEventListener] The key\"+ key +\" function already registered \");\r\n                        return ;\r\n                    }\r\n                });\r\n            }\r\n            else\r\n            {\r\n                list = [];\r\n                this.__evtMap[key] = list;\r\n            }\r\n            var command:JTCommand = JTCommand.create(caller, method, null, once);\r\n            list.push(command);\r\n        }\r\n\r\n        public static dispatchEvent(key:any, args?:any):void\r\n        {\r\n            var list:JTCommand[] = this.__evtMap[key];\r\n            if (list)\r\n            {\r\n                list.forEach(command => \r\n                {\r\n                    command && command.runWith(args)\r\n                    if (command.once)\r\n                    {\r\n                        this.delete(list, command);\r\n                    }\r\n                });\r\n            }\r\n            else\r\n            {\r\n                JTLogger.info(\"[JTEventManager.dispatchEvent] Cant find the function by key : \" + key);\r\n            }\r\n        }\r\n\r\n        public static removeEventListener(key:any, method:Function, caller:any):void\r\n        {\r\n            var list:JTCommand[] = this.__evtMap[key];\r\n            if (list)\r\n            {\r\n                list.forEach(element => \r\n                {\r\n                    if (element && element.method == method && element.caller == caller)\r\n                    {\r\n                        this.delete(list, element);\r\n                    }\r\n                });\r\n            }\r\n        }\r\n\r\n        public static removeEvents(key:any):void\r\n        {\r\n            var list:JTCommand[] = this.__evtMap[key];\r\n            if (list)\r\n            {\r\n                list.forEach(element => \r\n                {\r\n                    if (element)\r\n                    {\r\n                        this.delete(list, element);\r\n                    }\r\n                });\r\n                this.__evtMap[key] = null;\r\n                delete this.__evtMap[key]\r\n            }\r\n        }\r\n\r\n        protected static delete(list:JTCommand[], command:JTCommand):void\r\n        {\r\n                var index:number = list.indexOf(command);\r\n                var removes:JTCommand[] = list.splice(index, 1);\r\n                removes.shift();\r\n                JTCommand.put(command);\r\n        }\r\n\r\n        protected static removes() \r\n        {\r\n            // this._eventMap.forEach((value, key)=>{\r\n            //         this.removeEvents(key);\r\n            //         value.length = 0;\r\n            // })\r\n            // this._eventMap.clear();\r\n\r\n            // this._eventMap.forEach(element => {\r\n                \r\n            // });\r\n            var caller:any = this;\r\n            for (var key in this.__evtMap)\r\n            {\r\n                    this.removeEvents(key);\r\n            }\r\n            this.__evtMap = {};\r\n        }\r\n        \r\n    }\r\n}"]}