{"version":3,"sources":["assets\\Script\\src\\common\\JTTextLoader.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["namespace com\r\n{\r\n    export class JTTextLoader\r\n    {\r\n         private static _dataMap:Object = {};\r\n         private _url:string = null;\r\n         private _class:any = null;\r\n         private _urlLoader:JTURLLoader = null;\r\n         private _dataMap:Object = {};\r\n         private _values:any[] = [];\r\n         private _datas:any = null;\r\n\r\n         /**\r\n          * 字符串解析方式\r\n          */\r\n         public static PARSE_STRING:string = \"String\";\r\n        /**\r\n          * 二进制流解析方式\r\n          */\r\n         public static PARSE_BINARY:string = \"Binary\";\r\n        /**\r\n          * ZIP包解析方式\r\n          */\r\n         public static PARSE_ZIP:string = \"Zip\";\r\n\r\n        /**\r\n         * 默认加载方法\r\n         */\r\n         public static LOAD_DEFAULT:string = \"load\"; \r\n         /**\r\n          * 已加载完成-需要调用解析模式即可\r\n          */\r\n         public static LOADED_PARSE:string = \"loaded\";\r\n         \r\n         constructor(url?:string, cls?:any)\r\n         {\r\n             if (!url || !cls)return;\r\n             this.load(url, cls);\r\n         }\r\n\r\n         public load(url:string, cls:any):void\r\n         {\r\n                this._url = url;\r\n                this._class = cls;\r\n                this._urlLoader = new JTURLLoader();\r\n                this._urlLoader.addEventListener(JTURLLoader.ERROR, this.onloadError, this);\r\n                this._urlLoader.addEventListener(JTURLLoader.COMPLETE, this.onloadComplete, this);\r\n                this._urlLoader.send(url, null, \"get\", JTURLLoader.BUFFER);\r\n         }\r\n\r\n         public parseZip(data:any, cls:any):void\r\n         {\r\n            this._class = cls;\r\n         }\r\n         \r\n         public parseBinary(data:any, cls:any):void\r\n         {\r\n            this._class = cls;\r\n         }\r\n\r\n         public parseStr(data:string, cls:any):void\r\n         {\r\n            this._datas = data;\r\n            this._class = cls;\r\n            let list:string[] = data.split('\\n').join(\"\").split(\"\\r\");\r\n            let head:string = list.shift();\r\n            let propertys:string[] = head.split('\\t');\r\n            let keys:string[] = null;\r\n            for (let i:number = 0; i < list.length; i++)//赋值\r\n            {\r\n                let line:string = list[i];\r\n                let values:string[] = line.split(\"\\t\");\r\n                if (values.length < propertys.length) continue; //清除尾部空白数据\r\n                let template:JTBaseTemplate = new this._class();\r\n                if (!keys)keys = Object.keys(template);\r\n                for (let j:number = 0; j < keys.length; j++)//验证属性值是否匹配\r\n                {\r\n                    let property:string = propertys[j];\r\n                    if (i == 0)\r\n                    {\r\n                        let index:number = keys.indexOf(property);\r\n                        if (index == -1)\r\n                        {\r\n                            JTLogger.info(\"[JTTextLoader.parseStr] cls \" +  this._class + \" template cant find the key:  \" + property);\r\n                            continue\r\n                        }\r\n                    }\r\n                    let value:any = values[j];\r\n                    switch(true)\r\n                    {\r\n                        case typeof template[property] == 'number': //支持数值类型\r\n                        {\r\n                            value  = Number(value)\r\n                            break;\r\n                        }\r\n                        case value.indexOf(\"{\") != -1 : //支持JSON类型\r\n                        {\r\n                            value = JSON.parse(value);\r\n                            break;\r\n                        }\r\n                    }\r\n                    template[property] = value;\r\n                    if (property == \"id\") \r\n                    {\r\n                        this._dataMap[value] = template;\r\n                        this._values = value;\r\n                    }\r\n                }\r\n                template.endFill();\r\n            }\r\n         }\r\n\r\n         private onloadComplete(data:any):void\r\n         {\r\n                let buffer:JTBuffer = new JTBuffer(data);\r\n                buffer.pos = 0;\r\n                let content:string = buffer.readUTFBytes(buffer.bytesAvailable);\r\n                this.parseStr(content, this._class);\r\n         }\r\n\r\n         private onloadError(data:any):void\r\n         {\r\n            JTLogger.error(\"[JTTextLoader.load]  load text data error! the url : \" + this._url);\r\n         }\r\n\r\n         public toValues<T extends JTBaseTemplate>():T[]\r\n         {\r\n             let list:T[] = [];\r\n             let totalCount:number = this._values.length;\r\n             for (let i:number = 0; i < totalCount; i++)\r\n             {\r\n                 let template:T = this._values[i];\r\n                 list.push(template);\r\n             }\r\n             return list;\r\n         }\r\n\r\n         public toValue<T extends JTBaseTemplate>(key:string):T\r\n         {\r\n              return this._dataMap[key];\r\n         }\r\n    }\r\n}\r\n"]}