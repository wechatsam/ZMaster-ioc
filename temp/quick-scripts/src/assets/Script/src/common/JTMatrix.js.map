{"version":3,"sources":["assets\\Script\\src\\common\\JTMatrix.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["namespace com \r\n{\r\n    /**\r\n     * <p> <code>Matrix</code> 类表示一个转换矩阵，它确定如何将点从一个坐标空间映射到另一个坐标空间。</p>\r\n     * <p>您可以对一个显示对象执行不同的图形转换，方法是设置 Matrix 对象的属性，将该 Matrix 对象应用于 Transform 对象的 matrix 属性，然后应用该 Transform 对象作为显示对象的 transform 属性。这些转换函数包括平移（x 和 y 重新定位）、旋转、缩放和倾斜。</p>\r\n     */\r\n    export class JTMatrix implements JTIPoolObject {\r\n\r\n        /**@private 一个初始化的 <code>Matrix</code> 对象，不允许修改此对象内容。*/\r\n        static EMPTY: JTMatrix = new JTMatrix();\r\n        /**用于中转使用的 <code>Matrix</code> 对象。*/\r\n        static TEMP: JTMatrix = new JTMatrix();\r\n        /**@internal */\r\n        static _createFun: Function|null = null;\r\n\r\n        /**缩放或旋转图像时影响像素沿 x 轴定位的值。*/\r\n        a: number;\r\n        /**旋转或倾斜图像时影响像素沿 y 轴定位的值。*/\r\n        b: number;\r\n        /**旋转或倾斜图像时影响像素沿 x 轴定位的值。*/\r\n        c: number;\r\n        /**缩放或旋转图像时影响像素沿 y 轴定位的值。*/\r\n        d: number;\r\n        /**沿 x 轴平移每个点的距离。*/\r\n        tx: number;\r\n        /**沿 y 轴平移每个点的距离。*/\r\n        ty: number;\r\n        /**@internal 是否有旋转缩放操作*/\r\n        _bTransform: boolean = false;\r\n\r\n        /**\r\n         * 使用指定参数创建新的 <code>Matrix</code> 对象。\r\n         * @param a\t\t（可选）缩放或旋转图像时影响像素沿 x 轴定位的值。\r\n         * @param b\t\t（可选）旋转或倾斜图像时影响像素沿 y 轴定位的值。\r\n         * @param c\t\t（可选）旋转或倾斜图像时影响像素沿 x 轴定位的值。\r\n         * @param d\t\t（可选）缩放或旋转图像时影响像素沿 y 轴定位的值。\r\n         * @param tx\t（可选）沿 x 轴平移每个点的距离。\r\n         * @param ty\t（可选）沿 y 轴平移每个点的距离。\r\n         */\r\n        constructor(a: number = 1, b: number = 0, c: number = 0, d: number = 1, tx: number = 0, ty: number = 0, nums: number = 0) {\r\n            if (JTMatrix._createFun != null) {\r\n                return JTMatrix._createFun(a, b, c, d, tx, ty, nums);\r\n            }\r\n            this.a = a;\r\n            this.b = b;\r\n            this.c = c;\r\n            this.d = d;\r\n            this.tx = tx;\r\n            this.ty = ty;\r\n            this._checkTransform();\r\n        }\r\n\r\n        /**\r\n         * 将本矩阵设置为单位矩阵。\r\n         * @return 返回当前矩形。\r\n         */\r\n        identity(): JTMatrix {\r\n            this.a = this.d = 1;\r\n            this.b = this.tx = this.ty = this.c = 0;\r\n            this._bTransform = false;\r\n            return this;\r\n        }\r\n\r\n        /**@internal */\r\n        _checkTransform(): boolean {\r\n            return this._bTransform = (this.a !== 1 || this.b !== 0 || this.c !== 0 || this.d !== 1);\r\n        }\r\n\r\n        /**\r\n         * 设置沿 x 、y 轴平移每个点的距离。\r\n         * @param\tx 沿 x 轴平移每个点的距离。\r\n         * @param\ty 沿 y 轴平移每个点的距离。\r\n         * @return\t返回对象本身\r\n         */\r\n        setTranslate(x: number, y: number): JTMatrix {\r\n            this.tx = x;\r\n            this.ty = y;\r\n            return this;\r\n        }\r\n\r\n        /**\r\n         * 沿 x 和 y 轴平移矩阵，平移的变化量由 x 和 y 参数指定。\r\n         * @param\tx 沿 x 轴向右移动的量（以像素为单位）。\r\n         * @param\ty 沿 y 轴向下移动的量（以像素为单位）。\r\n         * @return 返回此矩形对象。\r\n         */\r\n        translate(x: number, y: number): JTMatrix {\r\n            this.tx += x;\r\n            this.ty += y;\r\n            return this;\r\n        }\r\n\r\n        /**\r\n         * 对矩阵应用缩放转换。\r\n         * @param\tx 用于沿 x 轴缩放对象的乘数。\r\n         * @param\ty 用于沿 y 轴缩放对象的乘数。\r\n         * @return\t返回矩阵对象本身\r\n         */\r\n        scale(x: number, y: number): JTMatrix {\r\n            this.a *= x;\r\n            this.d *= y;\r\n            this.c *= x;\r\n            this.b *= y;\r\n            this.tx *= x;\r\n            this.ty *= y;\r\n            this._bTransform = true;\r\n            return this;\r\n        }\r\n\r\n        /**\r\n         * 对 Matrix 对象应用旋转转换。\r\n         * @param\tangle 以弧度为单位的旋转角度。\r\n         * @return\t返回矩阵对象本身\r\n         */\r\n        rotate(angle: number): JTMatrix {\r\n            var cos: number = Math.cos(angle);\r\n            var sin: number = Math.sin(angle);\r\n            var a1: number = this.a;\r\n            var c1: number = this.c;\r\n            var tx1: number = this.tx;\r\n\r\n            this.a = a1 * cos - this.b * sin;\r\n            this.b = a1 * sin + this.b * cos;\r\n            this.c = c1 * cos - this.d * sin;\r\n            this.d = c1 * sin + this.d * cos;\r\n            this.tx = tx1 * cos - this.ty * sin;\r\n            this.ty = tx1 * sin + this.ty * cos;\r\n            this._bTransform = true;\r\n            return this;\r\n        }\r\n\r\n        /**\r\n         * 对 Matrix 对象应用倾斜转换。\r\n         * @param\tx 沿着 X 轴的 2D 倾斜弧度。\r\n         * @param\ty 沿着 Y 轴的 2D 倾斜弧度。\r\n         * @return 当前 Matrix 对象。\r\n         */\r\n        skew(x: number, y: number): JTMatrix {\r\n            var tanX: number = Math.tan(x);\r\n            var tanY: number = Math.tan(y);\r\n            var a1: number = this.a;\r\n            var b1: number = this.b;\r\n            this.a += tanY * this.c;\r\n            this.b += tanY * this.d;\r\n            this.c += tanX * a1;\r\n            this.d += tanX * b1;\r\n            return this;\r\n        }\r\n\r\n        /**\r\n         * 对指定的点应用当前矩阵的逆转化并返回此点。\r\n         * @param\tout 待转化的点 Point 对象。\r\n         * @return\t返回out\r\n         */\r\n        invertTransformPoint(out: JTPoint): JTPoint {\r\n            var a1: number = this.a;\r\n            var b1: number = this.b;\r\n            var c1: number = this.c;\r\n            var d1: number = this.d;\r\n            var tx1: number = this.tx;\r\n            var n: number = a1 * d1 - b1 * c1;\r\n\r\n            var a2: number = d1 / n;\r\n            var b2: number = -b1 / n;\r\n            var c2: number = -c1 / n;\r\n            var d2: number = a1 / n;\r\n            var tx2: number = (c1 * this.ty - d1 * tx1) / n;\r\n            var ty2: number = -(a1 * this.ty - b1 * tx1) / n;\r\n            return out.setTo(a2 * out.x + c2 * out.y + tx2, b2 * out.x + d2 * out.y + ty2);\r\n        }\r\n\r\n        /**\r\n         * 将 Matrix 对象表示的几何转换应用于指定点。\r\n         * @param\tout 用来设定输出结果的点。\r\n         * @return\t返回out\r\n         */\r\n        transformPoint(out: JTPoint): JTPoint {\r\n            return out.setTo(this.a * out.x + this.c * out.y + this.tx, this.b * out.x + this.d * out.y + this.ty);\r\n        }\r\n\r\n        /**\r\n         * 将 Matrix 对象表示的几何转换应用于指定点，忽略tx、ty。\r\n         * @param\tout 用来设定输出结果的点。\r\n         * @return\t返回out\r\n         */\r\n        transformPointN(out: JTPoint): JTPoint {\r\n            return out.setTo(this.a * out.x + this.c * out.y /*+ tx*/, this.b * out.x + this.d * out.y /*+ ty*/);\r\n        }\r\n\r\n        /**\r\n         * 获取 X 轴缩放值。\r\n         * @return  X 轴缩放值。\r\n         */\r\n        getScaleX(): number {\r\n            return this.b === 0 ? this.a : Math.sqrt(this.a * this.a + this.b * this.b);\r\n        }\r\n\r\n        /**\r\n         * 获取 Y 轴缩放值。\r\n         * @return Y 轴缩放值。\r\n         */\r\n        getScaleY(): number {\r\n            return this.c === 0 ? this.d : Math.sqrt(this.c * this.c + this.d * this.d);\r\n        }\r\n\r\n        /**\r\n         * 执行原始矩阵的逆转换。\r\n         * @return 当前矩阵对象。\r\n         */\r\n        invert(): JTMatrix {\r\n            var a1: number = this.a;\r\n            var b1: number = this.b;\r\n            var c1: number = this.c;\r\n            var d1: number = this.d;\r\n            var tx1: number = this.tx;\r\n            var n: number = a1 * d1 - b1 * c1;\r\n            this.a = d1 / n;\r\n            this.b = -b1 / n;\r\n            this.c = -c1 / n;\r\n            this.d = a1 / n;\r\n            this.tx = (c1 * this.ty - d1 * tx1) / n;\r\n            this.ty = -(a1 * this.ty - b1 * tx1) / n;\r\n            return this;\r\n        }\r\n\r\n        /**\r\n         *  将 Matrix 的成员设置为指定值。\r\n         * @param\ta 缩放或旋转图像时影响像素沿 x 轴定位的值。\r\n         * @param\tb 旋转或倾斜图像时影响像素沿 y 轴定位的值。\r\n         * @param\tc 旋转或倾斜图像时影响像素沿 x 轴定位的值。\r\n         * @param\td 缩放或旋转图像时影响像素沿 y 轴定位的值。\r\n         * @param\ttx 沿 x 轴平移每个点的距离。\r\n         * @param\tty 沿 y 轴平移每个点的距离。\r\n         * @return 当前矩阵对象。\r\n         */\r\n        setTo(a: number, b: number, c: number, d: number, tx: number, ty: number): JTMatrix {\r\n            this.a = a, this.b = b, this.c = c, this.d = d, this.tx = tx, this.ty = ty;\r\n            return this;\r\n        }\r\n\r\n        /**\r\n         * 将指定矩阵与当前矩阵连接，从而将这两个矩阵的几何效果有效地结合在一起。\r\n         * @param\tmatrix 要连接到源矩阵的矩阵。\r\n         * @return\t当前矩阵。\r\n         */\r\n        concat(matrix: JTMatrix): JTMatrix {\r\n            var a: number = this.a;\r\n            var c: number = this.c;\r\n            var tx: number = this.tx;\r\n            this.a = a * matrix.a + this.b * matrix.c;\r\n            this.b = a * matrix.b + this.b * matrix.d;\r\n            this.c = c * matrix.a + this.d * matrix.c;\r\n            this.d = c * matrix.b + this.d * matrix.d;\r\n            this.tx = tx * matrix.a + this.ty * matrix.c + matrix.tx;\r\n            this.ty = tx * matrix.b + this.ty * matrix.d + matrix.ty;\r\n            return this;\r\n        }\r\n\r\n        /**\r\n         * 将指定的两个矩阵相乘后的结果赋值给指定的输出对象。\r\n         * @param\tm1 矩阵一。\r\n         * @param\tm2 矩阵二。\r\n         * @param\tout 输出对象。\r\n         * @return\t结果输出对象 out。\r\n         */\r\n        static mul(m1: JTMatrix, m2: JTMatrix, out: JTMatrix): JTMatrix {\r\n            var aa: number = m1.a, ab: number = m1.b, ac: number = m1.c, ad: number = m1.d, atx: number = m1.tx, aty: number = m1.ty;\r\n            var ba: number = m2.a, bb: number = m2.b, bc: number = m2.c, bd: number = m2.d, btx: number = m2.tx, bty: number = m2.ty;\r\n            if (bb !== 0 || bc !== 0) {\r\n                out.a = aa * ba + ab * bc;\r\n                out.b = aa * bb + ab * bd;\r\n                out.c = ac * ba + ad * bc;\r\n                out.d = ac * bb + ad * bd;\r\n                out.tx = ba * atx + bc * aty + btx;\r\n                out.ty = bb * atx + bd * aty + bty;\r\n            } else {\r\n                out.a = aa * ba;\r\n                out.b = ab * bd;\r\n                out.c = ac * ba;\r\n                out.d = ad * bd;\r\n                out.tx = ba * atx + btx;\r\n                out.ty = bd * aty + bty;\r\n            }\r\n            return out;\r\n        }\r\n\r\n        /**\r\n         * 将指定的两个矩阵相乘，结果赋值给指定的输出数组，长度为16。\r\n         * @param m1\t矩阵一。\r\n         * @param m2\t矩阵二。\r\n         * @param out\t输出对象Array。\r\n         * @return 结果输出对象 out。\r\n         */\r\n        static mul16(m1: JTMatrix, m2: JTMatrix, out: any[]): any[] {\r\n            var aa: number = m1.a, ab: number = m1.b, ac: number = m1.c, ad: number = m1.d, atx: number = m1.tx, aty: number = m1.ty;\r\n            var ba: number = m2.a, bb: number = m2.b, bc: number = m2.c, bd: number = m2.d, btx: number = m2.tx, bty: number = m2.ty;\r\n            if (bb !== 0 || bc !== 0) {\r\n                out[0] = aa * ba + ab * bc;\r\n                out[1] = aa * bb + ab * bd;\r\n                out[4] = ac * ba + ad * bc;\r\n                out[5] = ac * bb + ad * bd;\r\n                out[12] = ba * atx + bc * aty + btx;\r\n                out[13] = bb * atx + bd * aty + bty;\r\n            } else {\r\n                out[0] = aa * ba;\r\n                out[1] = ab * bd;\r\n                out[4] = ac * ba;\r\n                out[5] = ad * bd;\r\n                out[12] = ba * atx + btx;\r\n                out[13] = bd * aty + bty;\r\n            }\r\n            return out;\r\n        }\r\n\r\n        /**\r\n         * @private\r\n         * 对矩阵应用缩放转换。反向相乘\r\n         * @param\tx 用于沿 x 轴缩放对象的乘数。\r\n         * @param\ty 用于沿 y 轴缩放对象的乘数。\r\n         */\r\n        scaleEx(x: number, y: number): void {\r\n            var ba: number = this.a, bb: number = this.b, bc: number = this.c, bd: number = this.d;\r\n            if (bb !== 0 || bc !== 0) {\r\n                this.a = x * ba;\r\n                this.b = x * bb;\r\n                this.c = y * bc;\r\n                this.d = y * bd;\r\n            } else {\r\n                this.a = x * ba;\r\n                this.b = 0 * bd;\r\n                this.c = 0 * ba;\r\n                this.d = y * bd;\r\n            }\r\n            this._bTransform = true;\r\n        }\r\n\r\n        /**\r\n         * @private\r\n         * 对 Matrix 对象应用旋转转换。反向相乘\r\n         * @param\tangle 以弧度为单位的旋转角度。\r\n         */\r\n        rotateEx(angle: number): void {\r\n            var cos: number = Math.cos(angle);\r\n            var sin: number = Math.sin(angle);\r\n            var ba: number = this.a, bb: number = this.b, bc: number = this.c, bd: number = this.d;\r\n            if (bb !== 0 || bc !== 0) {\r\n                this.a = cos * ba + sin * bc;\r\n                this.b = cos * bb + sin * bd;\r\n                this.c = -sin * ba + cos * bc;\r\n                this.d = -sin * bb + cos * bd;\r\n            } else {\r\n                this.a = cos * ba;\r\n                this.b = sin * bd;\r\n                this.c = -sin * ba;\r\n                this.d = cos * bd;\r\n            }\r\n            this._bTransform = true;\r\n        }\r\n\r\n        /**\r\n         * 返回此 Matrix 对象的副本。\r\n         * @return 与原始实例具有完全相同的属性的新 Matrix 实例。\r\n         */\r\n        clone(): JTMatrix {\r\n            var dec: JTMatrix = JTMatrix.create();\r\n            dec.a = this.a;\r\n            dec.b = this.b;\r\n            dec.c = this.c;\r\n            dec.d = this.d;\r\n            dec.tx = this.tx;\r\n            dec.ty = this.ty;\r\n            dec._bTransform = this._bTransform;\r\n            return dec;\r\n        }\r\n\r\n        /**\r\n         * 将当前 Matrix 对象中的所有矩阵数据复制到指定的 Matrix 对象中。\r\n         * @param\tdec 要复制当前矩阵数据的 Matrix 对象。\r\n         * @return\t已复制当前矩阵数据的 Matrix 对象。\r\n         */\r\n        copyTo(dec: JTMatrix): JTMatrix {\r\n            dec.a = this.a;\r\n            dec.b = this.b;\r\n            dec.c = this.c;\r\n            dec.d = this.d;\r\n            dec.tx = this.tx;\r\n            dec.ty = this.ty;\r\n            dec._bTransform = this._bTransform;\r\n            return dec;\r\n        }\r\n\r\n        /**\r\n         * 返回列出该 Matrix 对象属性的文本值。\r\n         * @return 一个字符串，它包含 Matrix 对象的属性值：a、b、c、d、tx 和 ty。\r\n         */\r\n        toString(): string {\r\n            return this.a + \",\" + this.b + \",\" + this.c + \",\" + this.d + \",\" + this.tx + \",\" + this.ty;\r\n        }\r\n\r\n        /**\r\n         * 销毁此对象。\r\n         */\r\n        destroy(): void {\r\n            this.recycle();\r\n        }\r\n\r\n        recycle() \r\n        {\r\n            this.identity();\r\n        }\r\n\r\n        public static get pool():JTIPool\r\n        {\r\n            if(!this._pool)\r\n            {\r\n                this._pool = JTPool.instance(JTMatrix);\r\n            }\r\n            return this._pool;\r\n        }\r\n        private static _pool:JTIPool = null;\r\n\r\n        public static create():JTMatrix\r\n        {\r\n            return this.pool.get() as JTMatrix;\r\n        }\r\n\r\n        public static put(point:JTMatrix):void\r\n        {\r\n            this.pool.put(point as JTIPoolObject);\r\n        }\r\n    }\r\n}\r\n"]}