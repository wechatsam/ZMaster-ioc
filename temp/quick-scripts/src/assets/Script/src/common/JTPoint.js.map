{"version":3,"sources":["assets\\Script\\src\\common\\JTPoint.ts"],"names":[],"mappings":";;;;;;IAEA,IAAU,GAAG,CAkGZ;IAlGD,WAAU,GAAG;QAKT;YAiBI,iBAAY,CAAa,EAAE,CAAa;gBAA5B,kBAAA,EAAA,KAAa;gBAAE,kBAAA,EAAA,KAAa;gBACpC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;gBACX,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;YACf,CAAC;YACD,yBAAO,GAAP;gBACI,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;gBACpB,OAAO,IAAI,CAAC;YAChB,CAAC;YAED,sBAAkB,eAAI;qBAAtB;oBAEI,IAAG,CAAC,IAAI,CAAC,KAAK,EACd;wBACI,IAAI,CAAC,KAAK,GAAG,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;qBACzC;oBACD,OAAO,IAAI,CAAC,KAAK,CAAC;gBACtB,CAAC;;;eAAA;YAGa,cAAM,GAApB;gBAEI,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,EAAa,CAAC;YACtC,CAAC;YAEa,WAAG,GAAjB,UAAkB,KAAa;gBAE3B,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,KAAsB,CAAC,CAAC;YAC1C,CAAC;YAQD,uBAAK,GAAL,UAAM,CAAS,EAAE,CAAS;gBACtB,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;gBACX,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;gBACX,OAAO,IAAI,CAAC;YAChB,CAAC;YAQD,0BAAQ,GAAR,UAAS,CAAS,EAAE,CAAS;gBACzB,OAAO,IAAI,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;YAChF,CAAC;YAGD,0BAAQ,GAAR;gBACI,OAAO,IAAI,CAAC,CAAC,GAAG,GAAG,GAAG,IAAI,CAAC,CAAC,CAAC;YACjC,CAAC;YAKD,2BAAS,GAAT;gBACI,IAAI,CAAC,GAAW,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;gBAC7D,IAAI,CAAC,GAAG,CAAC,EAAE;oBACP,IAAI,EAAE,GAAW,GAAG,GAAG,CAAC,CAAC;oBACzB,IAAI,CAAC,CAAC,IAAI,EAAE,CAAC;oBACb,IAAI,CAAC,CAAC,IAAI,EAAE,CAAC;iBAChB;YACL,CAAC;YAMD,sBAAI,GAAJ,UAAK,KAAc;gBACf,OAAO,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC;YACxC,CAAC;YAxFM,YAAI,GAAY,IAAI,OAAO,EAAE,CAAC;YAE9B,aAAK,GAAY,IAAI,OAAO,EAAE,CAAC;YA6BvB,aAAK,GAAW,IAAI,CAAC;YA0DxC,cAAC;SA5FD,AA4FC,IAAA;QA5FY,WAAO,UA4FnB,CAAA;IACL,CAAC,EAlGS,GAAG,KAAH,GAAG,QAkGZ","file":"","sourceRoot":"/","sourcesContent":[" \r\n\r\nnamespace com \r\n{\r\n/**\r\n * <code>Point</code> 对象表示二维坐标系统中的某个位置，其中 x 表示水平轴，y 表示垂直轴。\r\n */\r\n    export class JTPoint implements JTIPoolObject {\r\n\r\n        /**临时使用的公用对象。*/\r\n        static TEMP: JTPoint = new JTPoint();\r\n        /**@private 全局空的point对象(x=0，y=0)，不允许修改此对象内容*/\r\n        static EMPTY: JTPoint = new JTPoint();\r\n\r\n        /**该点的水平坐标。*/\r\n        x: number;\r\n        /**该点的垂直坐标。*/\r\n        y: number;\r\n\r\n        /**\r\n         * 根据指定坐标，创建一个新的 <code>Point</code> 对象。\r\n         * @param x\t（可选）水平坐标。\r\n         * @param y\t（可选）垂直坐标。\r\n         */\r\n        constructor(x: number = 0, y: number = 0) {\r\n            this.x = x;\r\n            this.y = y;\r\n        }\r\n        recycle() {\r\n            this.x = this.y = 0;\r\n            return this;\r\n        }\r\n\r\n        public static get pool():JTIPool\r\n        {\r\n            if(!this._pool)\r\n            {\r\n                this._pool = JTPool.instance(JTPoint);\r\n            }\r\n            return this._pool;\r\n        }\r\n        private static _pool:JTIPool = null;\r\n\r\n        public static create():JTPoint\r\n        {\r\n            return this.pool.get() as JTPoint;\r\n        }\r\n\r\n        public static put(point:JTPoint):void\r\n        {\r\n            this.pool.put(point as JTIPoolObject);\r\n        }\r\n\r\n        /**\r\n         * 将 <code>Point</code> 的成员设置为指定值。\r\n         * @param\tx 水平坐标。\r\n         * @param\ty 垂直坐标。\r\n         * @return 当前 Point 对象。\r\n         */\r\n        setTo(x: number, y: number): JTPoint {\r\n            this.x = x;\r\n            this.y = y;\r\n            return this;\r\n        }\r\n\r\n        /**\r\n         * 计算当前点和目标点(x，y)的距离。\r\n         * @param\tx 水平坐标。\r\n         * @param\ty 垂直坐标。\r\n         * @return\t返回当前点和目标点之间的距离。\r\n         */\r\n        distance(x: number, y: number): number {\r\n            return Math.sqrt((this.x - x) * (this.x - x) + (this.y - y) * (this.y - y));\r\n        }\r\n\r\n        /**返回包含 x 和 y 坐标的值的字符串。*/\r\n        toString(): string {\r\n            return this.x + \",\" + this.y;\r\n        }\r\n\r\n        /**\r\n         * 标准化向量。\r\n         */\r\n        normalize(): void {\r\n            var d: number = Math.sqrt(this.x * this.x + this.y * this.y);\r\n            if (d > 0) {\r\n                var id: number = 1.0 / d;\r\n                this.x *= id;\r\n                this.y *= id;\r\n            }\r\n        }\r\n\r\n        /**\r\n         * copy point坐标\r\n         * @param\tpoint 需要被copy的point\r\n         */\r\n        copy(point: JTPoint): JTPoint {\r\n            return this.setTo(point.x, point.y);\r\n        }\r\n    }\r\n}\r\n\r\n"]}