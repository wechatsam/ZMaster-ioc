{"version":3,"sources":["assets\\Script\\src\\coroutines\\JTLocker.ts"],"names":[],"mappings":";;;;;;IAAA,IAAU,GAAG,CAgEZ;IAhED,WAAU,GAAG;QAET;YAAA;gBAEc,aAAQ,GAAY,IAAI,CAAC;gBACzB,YAAO,GAAY,IAAI,CAAC;gBACxB,YAAO,GAAgB,IAAI,CAAC;gBAC5B,cAAS,GAAO,IAAI,CAAC;YAwDnC,CAAC;YAlDU,uBAAI,GAAX,UAAY,QAAa;gBAErB,IAAI,IAAI,CAAC,OAAO;oBAAE,OAAO,IAAI,CAAC,OAAO,CAAC;gBACtC,IAAI,MAAM,GAAY,IAAI,CAAC;gBAC3B,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC;gBAC5C,IAAI,CAAC,OAAO,GAAG,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;oBAEnC,MAAM,CAAC,OAAO,GAAG,MAAM,CAAC;oBACxB,MAAM,CAAC,QAAQ,GAAG,OAAO,CAAC;gBAClC,CAAC,CAAC,CAAA;gBACF,OAAO,IAAI,CAAC,OAAO,CAAC;YACxB,CAAC;YAEM,0BAAO,GAAd;gBAEI,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAA;gBAC5D,IAAI,CAAC,OAAO,EAAE,CAAC;YACnB,CAAC;YAEM,uBAAI,GAAX;gBAEI,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAA;gBAC1D,IAAI,CAAC,OAAO,EAAE,CAAC;YACnB,CAAC;YAEM,yBAAM,GAAb;gBAEI,OAAO,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC;YAChC,CAAC;YAOM,0BAAO,GAAd,UAAe,QAAY;gBAEvB,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC;gBAC5C,OAAO,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;YACpE,CAAC;YAEM,0BAAO,GAAd;gBAEI,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;YACxE,CAAC;YAEa,eAAM,GAApB;gBAEI,OAAO,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,GAAG,EAAc,CAAC;YACvD,CAAC;YACL,eAAC;QAAD,CA7DA,AA6DC,IAAA;QA7DY,YAAQ,WA6DpB,CAAA;IACL,CAAC,EAhES,GAAG,KAAH,GAAG,QAgEZ","file":"","sourceRoot":"/","sourcesContent":["namespace com \r\n{\r\n    export class JTLocker implements JTLocker \r\n    {\r\n        protected _resolve:Function = null;\r\n        protected _reject:Function = null;\r\n        protected _locker:Promise<any> = null;\r\n        protected ___result:any = null;\r\n        /**\r\n         * 如果不传结果，则会返回JTLocker自身\r\n         * @param __result \r\n         * @returns \r\n         */\r\n        public lock(__result?:any):Promise<any>\r\n        {\r\n            if (this._locker) return this._locker; //注意，当前正使用锁时，如果没有调用release 时不能再使用lock()方法\r\n            let locker:JTLocker = this;\r\n            this.___result = __result ? __result : this;\r\n            this._locker = new Promise((resolve, reject) => \r\n            {\r\n                    locker._reject = reject;\r\n                    locker._resolve = resolve;\r\n            })\r\n            return this._locker;\r\n        }\r\n\r\n        public release():void\r\n        {\r\n            this._resolve && this._resolve.apply(this, [this.___result])\r\n            this.recycle();\r\n        }\r\n\r\n        public kill():void\r\n        {\r\n            this._reject && this._reject.apply(this, [this.___result])\r\n            this.recycle();\r\n        }\r\n\r\n        public locked():boolean\r\n        {\r\n            return this._locker != null;\r\n        }\r\n\r\n        /**\r\n         * 如果不传结果，则会返回JTLocker自身\r\n         * @param __result \r\n         * @returns \r\n         */\r\n        public tryLock(__caller:any):Promise<any>\r\n        {\r\n            this.___result = __caller ? __caller : this;\r\n            return this.locked() ? this._locker : this.lock(this.___result);\r\n        }\r\n\r\n        public recycle() \r\n        {\r\n            this.___result = this._locker = this._reject = this._resolve = null;\r\n        }\r\n\r\n        public static create():JTLocker\r\n        {\r\n            return JTPool.instance(JTLocker).get() as JTLocker;\r\n        }\r\n    }\r\n}\r\n"]}