{"version":3,"sources":["assets\\Script\\src\\coroutines\\tasks\\JTFuturePipeline.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["///<reference path=\"../../events/JTEventDispatcher.ts\"/>\r\nnamespace com \r\n{\r\n    /**\r\n     * 异步事件任务对列\r\n     */\r\n    export class JTFuturePipeline extends JTEventDispatcher\r\n    {\r\n        protected _counter:JTTaskCounter = JTTaskCounter.create();\r\n        protected _tasks:JTITaskExecutor[] = null;\r\n        protected _factroy:JTIFactory = null;\r\n        protected _itemProvider:JTCommand = null;\r\n        protected _itemRender:JTCommand = null;\r\n        protected ___dataList:any[] = null;\r\n\r\n        /**\r\n         * 数据列表\r\n         * @param __datas \r\n         */\r\n        constructor(__datas?:any[])\r\n        {\r\n            super();\r\n            this.dataList = __datas;\r\n        }\r\n\r\n        /**\r\n         * 设置数据列表\r\n         */\r\n        public set dataList(___datas:any[])\r\n        {\r\n            this.___dataList = ___datas;\r\n            this._counter.setTotalCount(___datas.length);\r\n        }\r\n\r\n        /***\r\n         * 启动异步对列\r\n         * */\r\n        public async run():Promise<any>\r\n        {   \r\n            this._tasks = this.createTasks();\r\n            while(this._tasks.length)\r\n            {\r\n                let task:JTITaskExecutor = this._tasks.shift();\r\n                task.relevance(this._counter);\r\n                task.execute();\r\n                await this._counter.lock();\r\n                this.dispatchEvent(JTTaskEvent.TASK_PROGRESS, this);\r\n                task.recycle();\r\n            }\r\n            if (this._counter.completed)\r\n            {\r\n                this.dispatchEvent(JTTaskEvent.TASK_COMPLETE, this);\r\n            }\r\n        }   \r\n\r\n        /**\r\n         * 重置，清空上次所有任务队列数据\r\n         */\r\n        public reset():void\r\n        {\r\n            this.removes();\r\n            this._counter.reset();\r\n            this._tasks = null;\r\n            this._factroy = null;\r\n            this._itemRender && JTCommand.put(this._itemRender);\r\n            this._itemProvider && JTCommand.put(this._itemProvider);\r\n            this._itemProvider = null;\r\n            this._itemRender = null;\r\n            this.___dataList = null;\r\n        }\r\n        \r\n        private createTasks():JTITaskExecutor[] \r\n        {\r\n            let list:JTITaskExecutor[] = [];\r\n            let totalCount:number = this._counter.totalCount;\r\n            if (this._itemRender)\r\n            {\r\n                for (let i:number = 0; i < totalCount; i++)\r\n                {\r\n                    let task:JTITaskExecutor = this._itemRender.runWith([i, this.___dataList[i]]);\r\n                    list.push(task);\r\n                }\r\n            }\r\n            else if (this._itemProvider)\r\n            {\r\n                for (let i:number = 0; i < totalCount; i++)\r\n                {\r\n                    let task:JTITaskExecutor = this._itemProvider.runWith([i, this.___dataList[i]]);\r\n                    list.push(task);\r\n                }\r\n            }\r\n            else if (this._factroy)\r\n            {\r\n                for (let i:number = 0; i < totalCount; i++)\r\n                {\r\n                    let task:JTITaskExecutor = this._factroy.produce();\r\n                    list.push(task);\r\n                }\r\n            }\r\n            return list;\r\n        }\r\n\r\n        /**\r\n         * 设置工厂\r\n         */\r\n        public set factory(value:JTIFactory)\r\n        {\r\n            this._factroy = value;\r\n        }\r\n\r\n        /**\r\n         * 创建任务命令\r\n         */\r\n        public set itemRender(value:JTCommand)\r\n        {\r\n            this._itemRender = value;\r\n        }\r\n\r\n        /**\r\n         * 创建任务类命令\r\n         */\r\n        public set itemProvider(value:JTCommand)\r\n        {\r\n            this._itemProvider = value;\r\n        }\r\n \r\n        /**\r\n         * 计数器\r\n         */\r\n        public get counter():JTTaskCounter\r\n        {\r\n            return this._counter;\r\n        }\r\n    }\r\n}"]}