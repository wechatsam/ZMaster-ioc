{"version":3,"sources":["assets\\Script\\src\\coroutines\\tasks\\JTCounter.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;IAAA,IAAU,GAAG,CAwFZ;IAxFD,WAAU,GAAG;QAKT;YAA+B,6BAAQ;YAenC;gBAAA,YAEI,iBAAO,SACV;gBAbS,gBAAU,GAAU,CAAC,CAAC;gBAItB,mBAAa,GAAU,CAAC,CAAC;gBAIzB,kBAAY,GAAU,CAAC,CAAC;;YAKlC,CAAC;YAKM,2BAAO,GAAd;gBAEI,iBAAM,OAAO,WAAE,CAAC;gBAChB,IAAI,CAAC,aAAa,EAAG,CAAC;gBACtB,IAAI,CAAC,YAAY,EAAG,CAAC;YACzB,CAAC;YAKM,wBAAI,GAAX;gBAEI,iBAAM,IAAI,WAAE,CAAC;gBACb,IAAI,CAAC,UAAU,EAAG,CAAC;gBACnB,IAAI,CAAC,YAAY,EAAG,CAAC;YACzB,CAAC;YAKD,sBAAW,mCAAY;qBAAvB;oBAEI,OAAO,IAAI,CAAC,aAAa,CAAC;gBAC9B,CAAC;;;eAAA;YAID,sBAAW,gCAAS;qBAApB;oBAEI,OAAO,IAAI,CAAC,UAAU,CAAC;gBAC3B,CAAC;;;eAAA;YAEM,2BAAO,GAAd;gBAEI,iBAAM,OAAO,WAAE,CAAC;gBAChB,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,aAAa,GAAG,CAAC,CAAC;YACjE,CAAC;YAKM,yBAAK,GAAZ;gBAEI,IAAI,CAAC,OAAO,EAAE,CAAC;YACnB,CAAC;YAKD,sBAAW,kCAAW;qBAAtB;oBAEI,OAAO,IAAI,CAAC,YAAY,CAAC;gBAC7B,CAAC;;;eAAA;YAEa,gBAAM,GAApB;gBAEI,OAAO,MAAM,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC,GAAG,EAAe,CAAC;YACzD,CAAC;YAEL,gBAAC;QAAD,CAlFA,AAkFC,CAlF8B,QAAQ,GAkFtC;QAlFY,aAAS,YAkFrB,CAAA;IACL,CAAC,EAxFS,GAAG,KAAH,GAAG,QAwFZ","file":"","sourceRoot":"/","sourcesContent":["namespace com \r\n{\r\n    /**\r\n     * 计数器\r\n     */\r\n    export class JTCounter extends JTLocker\r\n    {\r\n        /*\r\n        *失败次数\r\n        */\r\n        protected _failCount:number = 0;\r\n        /*\r\n        *成功次数\r\n        */\r\n        protected _succeedCount:number = 0;\r\n        /*\r\n        *已经完成的次数\r\n        */\r\n        protected _lockedCount:number = 0;\r\n\r\n        constructor()\r\n        {\r\n            super();\r\n        }\r\n\r\n        /**\r\n         * 释放锁\r\n         */\r\n        public release():void\r\n        {\r\n            super.release();\r\n            this._succeedCount ++;\r\n            this._lockedCount ++;\r\n        }\r\n\r\n        /**\r\n         * 强制性解锁--取消锁\r\n         */\r\n        public kill():void\r\n        {\r\n            super.kill();\r\n            this._failCount ++;\r\n            this._lockedCount ++;\r\n        }\r\n\r\n        /**\r\n         * 成功的次数\r\n         */\r\n        public get succeedCount():number\r\n        {\r\n            return this._succeedCount;\r\n        }\r\n        /**\r\n         * 失败的次数\r\n         */\r\n        public get failCount():number\r\n        {\r\n            return this._failCount;\r\n        }\r\n\r\n        public recycle() \r\n        {\r\n            super.recycle();\r\n            this._failCount = this._lockedCount = this._succeedCount = 0;\r\n        }\r\n\r\n        /**\r\n         * 重置\r\n         */\r\n        public reset():void\r\n        {\r\n            this.recycle();\r\n        }\r\n\r\n        /**\r\n         * 当前执行的次数\r\n         */\r\n        public get lockedCount():number\r\n        {\r\n            return this._lockedCount;\r\n        }\r\n\r\n        public static create():JTCounter\r\n        {\r\n            return JTPool.instance(JTCounter).get() as JTCounter;\r\n        }\r\n   \r\n    }\r\n}"]}