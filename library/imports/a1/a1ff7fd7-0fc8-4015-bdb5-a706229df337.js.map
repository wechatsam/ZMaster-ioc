{"version":3,"sources":["assets\\Script\\src\\network\\contexts\\decode\\JTAbstractDecoderAdapter.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;IACA,IAAU,GAAG,CA6DZ;IA7DD,WAAU,GAAG;QAET;YAAuD,4CAAuB;YAM1E;gBAAA,YAEI,iBAAO,SAEV;gBARS,qBAAe,GAA6B,IAAI,CAAC;gBACjD,sBAAgB,GAA6B,IAAI,CAAC;gBAClD,0BAAoB,GAAkC,IAAI,CAAC;gBAC3D,mBAAa,GAAe,IAAI,CAAC;;YAK3C,CAAC;YAEM,gDAAa,GAApB;gBAEI,IAAI,CAAC,eAAe,GAAG,sBAAsB,CAAC,UAAU,CAAC,sBAAsB,CAAC,eAAe,CAAC,CAAA;gBAChG,IAAI,CAAC,gBAAgB,GAAG,sBAAsB,CAAC,UAAU,CAAC,sBAAsB,CAAC,gBAAgB,CAAC,CAAC;gBACnG,IAAI,CAAC,oBAAoB,GAAG,sBAAsB,CAAC,UAAU,CAAC,sBAAsB,CAAC,qBAAqB,CAAC,CAAC;gBAC5G,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,gBAAgB,CAAC,YAAY,CAAC;YAC5D,CAAC;YAIM,+CAAY,GAAnB,UAAoB,cAAgC;gBAEhD,IAAI,QAAQ,GAAU,cAAc,CAAC,QAAQ,CAAC;gBAC9C,IAAI,OAAO,GAAO,cAAc,CAAC,OAAO,CAAC;gBACzC,IAAI,YAAY,GAAiB,IAAI,CAAC,aAAa,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;gBAC1E,IAAI,CAAC,YAAY,EACjB;oBACI,QAAQ,CAAC,KAAK,CAAC,iEAAiE,GAAG,QAAQ,CAAC,CAAC;iBAChG;gBACD,IAAI,YAAY,IAAI,YAAY,CAAC,SAAS,EAC1C;oBACI,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;iBACvC;gBACD,IAAI,IAAI,CAAC,oBAAoB,CAAC,kBAAkB,CAAC,cAAc,CAAC,EAChE;oBACI,IAAI,IAAI,CAAC,eAAe;wBAAE,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;oBACrE,iBAAiB,CAAC,OAAO,CAAC,QAAQ,CAAC,QAAQ,EAAE,EAAE,OAAO,CAAC,CAAC;oBACxD,QAAQ,CAAC,IAAI,CAAC,sCAAsC,GAAG,QAAQ,EAAG,gBAAgB,GAAG,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,CAAC;iBACjH;qBAED;oBACI,IAAI,CAAC,oBAAoB,CAAC,gBAAgB,CAAC,cAAc,CAAC,CAAC;oBAC3D,QAAQ,CAAC,IAAI,CAAC,kCAAkC,GAAG,QAAQ,EAAG,kBAAkB,GAAG,cAAc,CAAC,SAAS,CAAC,CAAC;iBAChH;YACL,CAAC;YAEM,kDAAe,GAAtB;YAGA,CAAC;YAES,2CAAQ,GAAlB,UAAmB,QAAe,EAAE,IAAQ;gBAExC,OAAO,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAA;YACtD,CAAC;YAEL,+BAAC;QAAD,CA1DA,AA0DC,CA1DsD,uBAAuB,GA0D7E;QA1DqB,4BAAwB,2BA0D7C,CAAA;IACL,CAAC,EA7DS,GAAG,KAAH,GAAG,QA6DZ","file":"","sourceRoot":"/","sourcesContent":["///<reference path=\"../JTChannelContextAdapter.ts\"/>\r\nnamespace com \r\n{\r\n    export abstract class JTAbstractDecoderAdapter extends JTChannelContextAdapter implements JTIDecoderAdapter\r\n    {\r\n        protected _responseMapper:JTAbstractResponseMapping = null;\r\n        protected _protocolContext:JTAbstractProtocolManager = null;\r\n        protected _errorMessageContext:JTAbstractProtocolErrorMessage = null;\r\n        protected _downProtocol:JTIProtocol = null;\r\n        constructor()\r\n        {\r\n            super();\r\n            \r\n        }\r\n\r\n        public channelActive():void\r\n        {\r\n            this._responseMapper = JTApplicationBootstrap.getContext(JTApplicationBootstrap.CONTEXT_MAPPING)\r\n            this._protocolContext = JTApplicationBootstrap.getContext(JTApplicationBootstrap.CONTEXT_PROTOCOL);\r\n            this._errorMessageContext = JTApplicationBootstrap.getContext(JTApplicationBootstrap.CONTEXT_ERROR_MESSAGE);\r\n            this._downProtocol = this._protocolContext.downProtocol;\r\n        }\r\n\r\n        public abstract decode(data:any):any;\r\n\r\n        public readComplete(receivePackage:JTIReceivePackage):void\r\n        {\r\n            let protocol:number = receivePackage.protocol;\r\n            let content:any = receivePackage.content;\r\n            let itemProtocol:JTItemProtocol= this._downProtocol.getProtocol(protocol);\r\n            if (!itemProtocol)\r\n            {\r\n                JTLogger.debug(\"[receivePackage.read] the downProcotol cant register protocol: \" + protocol);\r\n            }\r\n            if (itemProtocol && itemProtocol.isWaiting)\r\n            {\r\n                this._downProtocol.execute(content);\r\n            }\r\n            if (this._errorMessageContext.checkPackageStatus(receivePackage))\r\n            {\r\n                if (this._responseMapper) content = this.toMapper(protocol, content); //检查协议号是否绑定了Mapper映射序列化\r\n                JTFunctionManager.execute(protocol.toString(), content);\r\n                JTLogger.info(\"[receivePackage.read] DownProtocol: \" + protocol,  \"    content:  \" + JSON.stringify(content));\r\n            }\r\n            else\r\n            {\r\n                this._errorMessageContext.showErrorMessage(receivePackage);\r\n                JTLogger.info(\"[receivePackage.read] protocol: \" + protocol,  \"    errorCode:  \" + receivePackage.errorCode);\r\n            }\r\n        }\r\n\r\n        public channelInactive(): void\r\n        {\r\n\r\n        }\r\n\r\n        protected toMapper(protocol:number, data:any):any\r\n        {\r\n            return this._responseMapper.create(protocol, data)\r\n        }\r\n    \r\n    }\r\n}\r\n"]}