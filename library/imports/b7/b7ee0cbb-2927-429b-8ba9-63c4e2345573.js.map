{"version":3,"sources":["assets\\Script\\src\\network\\JTWebSocketChannel.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["///<reference path=\"JTChannel.ts\"/>\r\nnamespace com \r\n{\r\n    export class JTWebSocketChannel extends JTChannel\r\n    {\r\n        protected _connected:boolean = false;\r\n        protected _buffers:any[] = null;\r\n        protected _idleState:JTIChannelContext = null;\r\n        constructor(cls:any)\r\n        {\r\n            super(cls);\r\n            this._buffers = [];\r\n        }\r\n\r\n        public flush():void \r\n        {\r\n            let socket:JTWebSocket = this._channel as JTWebSocket;\r\n            while(this._buffers.length)\r\n            {\r\n                let msg:any = this._buffers.shift();\r\n                if (socket)\r\n                {   \r\n                    socket.connected && socket.send(msg);\r\n                    this._encoder.writeComplete(msg);\r\n                }\r\n            }\r\n        }\r\n\r\n        public send(data:any):void \r\n        {\r\n            let message:any = this._encoder.encode(data);\r\n            let socket:JTWebSocket = this._channel as JTWebSocket;\r\n            if (socket && socket.connected)\r\n            {   \r\n                socket.send(message);\r\n                this._encoder.writeComplete(message);\r\n            }\r\n            else\r\n            {\r\n                this._buffers.push(message);\r\n                JTLogger.info(\"send error, the websocket cant send msg to server!\");\r\n            }\r\n        }\r\n\r\n        public config(host:string, port:number):any\r\n        {\r\n            super.config(host, port);\r\n        }\r\n\r\n        public connect():any\r\n        {\r\n            var channel:JTWebSocket = super.connect() as JTWebSocket;\r\n            channel.addEventListener(JTWebSocket.OPEN, this.onConnectSucceed, this);\r\n            channel.addEventListener(JTWebSocket.MESSAGE, this.onReceiveMessage, this);\r\n            channel.addEventListener(JTWebSocket.CLOSE, this.onCloseHandler, this);\r\n            channel.addEventListener(JTWebSocket.ERROR, this.onErrorHandler, this);\r\n            channel.connect(this._host, this.port);\r\n            return channel;\r\n        }\r\n\r\n        protected onConnectSucceed(e):void\r\n        {\r\n            JTLogger.info(\"connect succeed!\")\r\n            this.pipeline.channelActive();\r\n            this.flush();\r\n            JTFunctionManager.execute(JTWebSocket.OPEN);\r\n        }\r\n\r\n        protected onReceiveMessage(data:any):void\r\n        {\r\n            let decoder:JTIDecoderAdapter = this._decoder;\r\n            let message:any = decoder.decode(data);\r\n            decoder.readComplete(message);\r\n        }\r\n\r\n        protected onCloseHandler(e):void\r\n        {\r\n            this.pipeline.channelInactive();\r\n            JTLogger.info(\"the server already close\");\r\n        }\r\n\r\n        protected onErrorHandler(e):void\r\n        {\r\n            this.pipeline.channelInactive();\r\n            JTLogger.info(\"current connect error\")\r\n        }\r\n\r\n        public reload():void \r\n        {\r\n            super.reload();\r\n            this._idleState = this._pipeline.getContext(JTChannelContext.IDLE) as JTIChannelContext;\r\n        }\r\n    }\r\n}\r\n"]}