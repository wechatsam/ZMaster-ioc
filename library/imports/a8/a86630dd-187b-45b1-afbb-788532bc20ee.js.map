{"version":3,"sources":["assets\\Script\\src\\events\\JTEventDispatcher.ts"],"names":[],"mappings":";;;;;;IAAA,IAAU,GAAG,CA8HZ;IA9HD,WAAU,GAAG;QAET;YAGI;gBADW,aAAQ,GAAU,IAAI,CAAC;YAGlC,CAAC;YAED,mCAAO,GAAP;gBAEI,IAAI,CAAC,OAAO,EAAE,CAAC;YACnB,CAAC;YAEM,4CAAgB,GAAvB,UAAwB,GAAO,EAAE,MAAe,EAAE,MAAU,EAAE,IAAa;gBAEvE,IAAI,IAAI,GAAe,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;gBACxC,IAAI,IAAI,EACR;oBACI,IAAI,CAAC,OAAO,CAAC,UAAA,OAAO;wBAEhB,IAAI,OAAO,IAAI,OAAO,CAAC,MAAM,IAAI,MAAM,IAAI,OAAO,CAAC,MAAM,IAAI,MAAM,EACnE;4BAEI,OAAQ;yBACX;oBACL,CAAC,CAAC,CAAC;iBACN;qBAED;oBACI,IAAI,GAAG,EAAE,CAAC;oBACV,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC;iBAC7B;gBACD,IAAI,OAAO,GAAa,SAAS,CAAC,MAAM,CAAC,MAAM,EAAE,MAAM,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;gBACrE,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;YACvB,CAAC;YAEM,yCAAa,GAApB,UAAqB,GAAO,EAAE,IAAS;gBAAvC,iBAkBC;gBAhBG,IAAI,IAAI,GAAe,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;gBACxC,IAAI,IAAI,EACR;oBACI,IAAI,CAAC,OAAO,CAAC,UAAA,OAAO;wBAEhB,OAAO,IAAI,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAA;wBAChC,IAAI,OAAO,CAAC,IAAI,EAChB;4BACI,KAAI,CAAC,MAAM,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;yBAC9B;oBACL,CAAC,CAAC,CAAC;iBACN;qBAED;iBAEC;YACL,CAAC;YAEM,+CAAmB,GAA1B,UAA2B,GAAO,EAAE,MAAe,EAAE,MAAU;gBAA/D,iBAcC;gBAZG,IAAI,IAAI,GAAe,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;gBACxC,IAAI,IAAI,EACR;oBACI,IAAI,CAAC,OAAO,CAAC,UAAA,OAAO;wBAEhB,IAAI,OAAO,IAAI,OAAO,CAAC,MAAM,IAAI,MAAM,IAAI,OAAO,CAAC,MAAM,IAAI,MAAM,EACnE;4BACI,KAAI,CAAC,MAAM,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;yBAC9B;oBACL,CAAC,CAAC,CAAC;iBAEN;YACL,CAAC;YAEM,wCAAY,GAAnB,UAAoB,GAAO;gBAA3B,iBAeC;gBAbG,IAAI,IAAI,GAAe,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;gBACxC,IAAI,IAAI,EACR;oBACI,IAAI,CAAC,OAAO,CAAC,UAAA,OAAO;wBAEhB,IAAI,OAAO,EACX;4BACI,KAAI,CAAC,MAAM,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;yBAC9B;oBACL,CAAC,CAAC,CAAC;oBACH,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC;oBAC1B,OAAO,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAA;iBAC5B;YACL,CAAC;YAES,kCAAM,GAAhB,UAAiB,IAAgB,EAAE,OAAiB;gBAE5C,IAAI,KAAK,GAAU,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;gBACzC,IAAI,OAAO,GAAe,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;gBAChD,OAAO,CAAC,KAAK,EAAE,CAAC;gBAChB,SAAS,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;YAC/B,CAAC;YAES,mCAAO,GAAjB;gBAWI,KAAK,IAAI,GAAG,IAAI,IAAI,CAAC,MAAM,EAC3B;oBACQ,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC;iBAC9B;gBACD,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;YACvB,CAAC;YAED,sBAAW,qCAAM;qBAAjB;oBAEI,IAAI,CAAC,IAAI,CAAC,QAAQ,EAClB;wBACI,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;qBACtB;oBACD,OAAO,IAAI,CAAC,QAAQ,CAAC;gBACzB,CAAC;;;eAAA;YAEL,wBAAC;QAAD,CA3HA,AA2HC,IAAA;QA3HY,qBAAiB,oBA2H7B,CAAA;IACL,CAAC,EA9HS,GAAG,KAAH,GAAG,QA8HZ","file":"","sourceRoot":"/","sourcesContent":["namespace com \r\n{\r\n    export class JTEventDispatcher implements JTIPoolObject, JTIEventDispatcher\r\n    {\r\n        protected  __evtMap:Object = null;\r\n        constructor()\r\n        {\r\n        }\r\n\r\n        recycle() \r\n        {\r\n            this.removes();\r\n        }\r\n\r\n        public addEventListener(key:any, method:Function, caller:any, once?:boolean):void\r\n        {\r\n            var list:JTCommand[] = this.evtMap[key];//只有在注册的时候调用get方法，注入事件监听时，事件MAP会为null\r\n            if (list)\r\n            {\r\n                list.forEach(element => \r\n                {\r\n                    if (element && element.method == method && element.caller == caller)\r\n                    {\r\n                        // JTLogger.info(\"[JTFunctionManager.registerFunction] The key\"+ key +\" function already registered \");\r\n                        return ;\r\n                    }\r\n                });\r\n            }\r\n            else\r\n            {\r\n                list = [];\r\n                this.__evtMap[key] = list;\r\n            }\r\n            var command:JTCommand = JTCommand.create(caller, method, null, once);\r\n            list.push(command);\r\n        }\r\n\r\n        public dispatchEvent(key:any, args?:any):void\r\n        {\r\n            var list:JTCommand[] = this.evtMap[key];\r\n            if (list)\r\n            {\r\n                list.forEach(command => \r\n                {\r\n                    command && command.runWith(args)\r\n                    if (command.once)\r\n                    {\r\n                        this.delete(list, command);\r\n                    }\r\n                });\r\n            }\r\n            else\r\n            {\r\n                // JTLogger.info(\"[JTFunctionManager.execute] Cant find the function by key : \" + key);\r\n            }\r\n        }\r\n\r\n        public removeEventListener(key:any, method:Function, caller:any):void\r\n        {\r\n            var list:JTCommand[] = this.evtMap[key];\r\n            if (list)\r\n            {\r\n                list.forEach(element => \r\n                {\r\n                    if (element && element.method == method && element.caller == caller)\r\n                    {\r\n                        this.delete(list, element);\r\n                    }\r\n                });\r\n                \r\n            }\r\n        }\r\n\r\n        public removeEvents(key:any):void\r\n        {\r\n            var list:JTCommand[] = this.evtMap[key];\r\n            if (list)\r\n            {\r\n                list.forEach(element => \r\n                {\r\n                    if (element)\r\n                    {\r\n                        this.delete(list, element);\r\n                    }\r\n                });\r\n                this.__evtMap[key] = null;\r\n                delete this.__evtMap[key]\r\n            }\r\n        }\r\n\r\n        protected delete(list:JTCommand[], command:JTCommand):void\r\n        {\r\n                var index:number = list.indexOf(command);\r\n                var removes:JTCommand[] = list.splice(index, 1);\r\n                removes.shift();\r\n                JTCommand.put(command);\r\n        }\r\n\r\n        protected removes() \r\n        {\r\n            // this._eventMap.forEach((value, key)=>{\r\n            //         this.removeEvents(key);\r\n            //         value.length = 0;\r\n            // })\r\n            // this._eventMap.clear();\r\n\r\n            // this._eventMap.forEach(element => {\r\n                \r\n            // });\r\n            for (var key in this.evtMap)\r\n            {\r\n                    this.removeEvents(key);\r\n            }\r\n            this.__evtMap = {};\r\n        }\r\n\r\n        public get evtMap():Object\r\n        {\r\n            if (!this.__evtMap)\r\n            {\r\n                this.__evtMap = {};\r\n            }\r\n            return this.__evtMap;\r\n        }\r\n        \r\n    }\r\n}"]}