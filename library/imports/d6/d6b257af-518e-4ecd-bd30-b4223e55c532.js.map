{"version":3,"sources":["assets\\Script\\src\\coroutines\\tasks\\JTTaskCounter.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;IAAA,IAAU,GAAG,CAwEZ;IAxED,WAAU,GAAG;QAKT;YAA4C,iCAAS;YAMjD;gBAAA,YAEI,iBAAO,SACV;gBAJO,iBAAW,GAAU,CAAC,CAAC;;YAI/B,CAAC;YAMM,qCAAa,GAApB,UAAqB,UAAiB;gBAElC,IAAI,CAAC,WAAW,GAAG,UAAU,CAAC;YAClC,CAAC;YAKD,sBAAW,qCAAU;qBAArB;oBAEI,OAAO,IAAI,CAAC,WAAW,CAAC;gBAC5B,CAAC;;;eAAA;YAEM,+BAAO,GAAd;gBAEI,iBAAM,OAAO,WAAE,CAAC;gBAChB,IAAI,CAAC,WAAW,GAAG,CAAC,CAAC;YACzB,CAAC;YAOD,sBAAW,oCAAS;qBAApB;oBAEI,IAAI,KAAK,GAAU,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,UAAU,CAAC;oBACxD,IAAI,IAAI,CAAC,WAAW,IAAI,KAAK;wBAAC,OAAO,KAAK,CAAC;yBAE3C;wBACI,IAAI,IAAI,CAAC,WAAW,IAAI,IAAI,CAAC,aAAa;4BAAE,OAAO,IAAI,CAAC;6BAExD;4BACI,IAAI,CAAC,gCAAgC,GAAI,IAAI,CAAC,UAAU,CAAC,CAAC;yBAC7D;qBACJ;oBACD,OAAO,IAAI,CAAC;gBAChB,CAAC;;;eAAA;YAKD,sBAAW,mCAAQ;qBAAnB;oBAEI,OAAO,UAAU,CAAC,CAAC,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,WAAW,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;gBACzE,CAAC;;;eAAA;YAEa,oBAAM,GAApB;gBAEI,OAAO,MAAM,CAAC,QAAQ,CAAC,aAAa,CAAC,CAAC,GAAG,EAAmB,CAAC;YACjE,CAAC;YACL,oBAAC;QAAD,CAlEA,AAkEC,CAlE2C,SAAS,GAkEpD;QAlEqB,iBAAa,gBAkElC,CAAA;IACL,CAAC,EAxES,GAAG,KAAH,GAAG,QAwEZ","file":"","sourceRoot":"/","sourcesContent":["namespace com \r\n{\r\n    /**\r\n     * 任务计数器\r\n     */\r\n    export abstract class JTTaskCounter extends JTCounter\r\n    {\r\n        /**\r\n         * 总共需要执行多少次\r\n         */\r\n        private _totalCount:number = 0;\r\n        constructor()\r\n        {\r\n            super();\r\n        }\r\n\r\n        /**\r\n         * 设置总共需要执行多少次\r\n         * @param totalCount 总次数\r\n         */\r\n        public setTotalCount(totalCount:number):void\r\n        {\r\n            this._totalCount = totalCount;\r\n        }\r\n\r\n        /**\r\n         * 总次数\r\n         */\r\n        public get totalCount():number\r\n        {\r\n            return this._totalCount;\r\n        }\r\n\r\n        public recycle() \r\n        {\r\n            super.recycle();\r\n            this._totalCount = 0;\r\n        }\r\n\r\n        /**\r\n         * 是否完成\r\n         * 只要失败和成功总次数不等于totalCount时，返回false\r\n         * 否则返回true\r\n         */\r\n        public get completed():boolean\r\n        {\r\n            let count:number = this._succeedCount + this._failCount;\r\n            if (this._totalCount != count)return false;\r\n            else\r\n            {\r\n                if (this._totalCount == this._succeedCount) return true;\r\n                else\r\n                {\r\n                    info(\"the task execute fail count:  \" +  this._failCount);\r\n                }\r\n            }\r\n            return true;\r\n        }\r\n\r\n        /**\r\n         * 执行进度的百分比,返回小数点后四位\r\n         */\r\n        public get progress():number\r\n        {\r\n            return parseFloat((this._lockedCount / this._totalCount).toFixed(4));\r\n        }\r\n\r\n        public static create():JTTaskCounter\r\n        {\r\n            return JTPool.instance(JTTaskCounter).get() as JTTaskCounter;\r\n        }\r\n    }\r\n}"]}