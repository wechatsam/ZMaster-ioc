{"version":3,"sources":["assets\\Script\\src\\events\\JTEventSignaler.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["namespace com \r\n{\r\n        /***\r\n         * 事件信号器 --- 基于全局函数派发执行，\r\n         */\r\n        export class JTEventSignaler implements JTIEventSignaler\r\n        {\r\n                private __evtMap:Object = null;\r\n                private __funMap:Object = null;\r\n\r\n                recycle() \r\n                {\r\n                        this.removeEvents();\r\n                        this.removeFunctions();\r\n                }\r\n\r\n                //由于装饰器注入的对象是单例时，此方法生效（装鉓器的对象有多个时，未测试）因为该对象并未实例化，装饰器\r\n\t\t//提前注入该对象的方法，可能导致指针异常\r\n   \r\n\r\n                public addEventListener(key:any, method:Function, caller:any, once?:boolean):void\r\n                {\r\n                        if (!this.evtMap[key])//只有在注册的时候调用get方法，注入事件监听时，事件MAP会为null\r\n                        {\r\n                                this.__evtMap[key] = method;\r\n                                JTEventManager.addEventListener(key, method, caller, once);\r\n                        }       \r\n                }\r\n\r\n                public dispatchEvent(key:any, args?:any):void\r\n                {\r\n                        key in this.evtMap && JTEventManager.dispatchEvent(key, args);\r\n                }\r\n\r\n                public removeEventListener(key:any, method:Function, caller:any):void\r\n                {\r\n                        let fun:Function = this.evtMap[key]\r\n                        fun = null;\r\n                        this.__evtMap[key] = null;\r\n                        delete this.__evtMap[key]\r\n                        JTEventManager.removeEventListener(key, method, caller);\r\n                }\r\n\r\n                public removeEvents() \r\n                {\r\n                        var caller:any = this;\r\n                        for (var key in this.evtMap)\r\n                        {\r\n                                this.removeEventListener(key, this.__evtMap[key], caller)\r\n                        }\r\n                        this.__evtMap = {};\r\n                }\r\n\r\n                public registerFunction(key:any, method:Function, caller:any, once?:boolean):void\r\n                {\r\n                        if (!this.funMap[key])//只有在注册的时候调用get方法，注入事件监听时，事件MAP会为null\r\n                        {\r\n                                this.__funMap[key] = method;\r\n                                JTFunctionManager.registerFunction(key, method, caller, once);\r\n                        }       \r\n                }\r\n\r\n                public execute(key:any, args?:any):void\r\n                {\r\n                        key in this.funMap && JTFunctionManager.execute(key, args);\r\n                }\r\n\r\n                public removeFunction(key:any, method:Function, caller:any):void\r\n                {\r\n                        let fun:Function = this.funMap[key]\r\n                        fun = null;\r\n                        this.__funMap[key] = null;\r\n                        delete this.__funMap[key]\r\n                        JTFunctionManager.removeFunction(key, method, caller);\r\n                }\r\n\r\n                public removeFunctions() \r\n                {\r\n                        var caller:any = this;\r\n                        for (var key in this.funMap)\r\n                        {\r\n                                this.removeFunction(key, this.__funMap[key], caller)\r\n                        }\r\n                        this.__funMap = {};\r\n                }\r\n\r\n\r\n                public get evtMap():Object\r\n                {\r\n                        if (!this.__evtMap)\r\n                        {\r\n                                this.__evtMap = {};\r\n                        }       \r\n                        return this.__evtMap;\r\n                }\r\n\r\n                public get funMap():Object\r\n                {\r\n                        if (!this.__funMap)\r\n                        {\r\n                                this.__funMap = {};\r\n                        }       \r\n                        return this.__funMap;\r\n                }\r\n\r\n                public static get pool():JTIPool\r\n                {\r\n                    if(!this._pool)\r\n                    {\r\n                        this._pool = JTPool.instance(JTEventSignaler);\r\n                    }\r\n                    return this._pool;\r\n                }\r\n                \r\n                private static _pool:JTIPool = null;\r\n                public static create():JTEventSignaler\r\n                {\r\n                    var signaler:JTEventSignaler = this.pool.get() as JTEventSignaler;\r\n                    return signaler;\r\n                }\r\n        \r\n                public static put(signaler:JTEventSignaler):void\r\n                {\r\n                    this.pool.put(signaler)\r\n                }\r\n        }\r\n\r\n        \r\n}\r\n"]}