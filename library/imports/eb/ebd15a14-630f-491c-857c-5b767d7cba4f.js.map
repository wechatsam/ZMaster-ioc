{"version":3,"sources":["assets\\Script\\src\\time\\frames\\JTJumpFrame.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;IAAA,IAAU,GAAG,CAoGZ;IApGD,WAAU,GAAG;QA0BT;YAAiC,+BAAY;YAGzC;gBAAA,YAEI,iBAAO,SACV;gBAJO,iBAAW,GAAU,CAAC,CAAC;;YAI/B,CAAC;YAKD,sBAAW,mCAAU;qBAArB;oBAEK,OAAO,IAAI,CAAC,WAAW,CAAC;gBAC7B,CAAC;;;eAAA;YAEM,gCAAU,GAAjB,UAAkB,IAAW;gBAEzB,IAAI,CAAC,YAAY,IAAI,IAAI,CAAC;gBAC1B,IAAI,KAAK,GAAU,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC;gBAClE,IAAI,CAAC,WAAW,GAAG,CAAC,CAAC;gBACrB,IAAI,KAAK,GAAG,CAAC,EACb;oBACI,IAAI,CAAC,WAAW,GAAG,KAAK,GAAG,CAAC,CAAC;oBAC7B,IAAI,QAAQ,GAAU,IAAI,CAAC,aAAa,GAAG,KAAK,CAAC;oBACjD,IAAI,UAAU,GAAU,IAAI,CAAC,KAAK,CAAC,QAAQ,GAAG,IAAI,CAAC,WAAW,CAAC,CAAC;oBAChE,IAAI,CAAC,UAAU,IAAI,UAAU,CAAC;oBAC9B,IAAI,IAAI,CAAC,KAAK,IAAI,CAAC,EACnB;wBACI,IAAI,CAAC,aAAa,GAAG,QAAQ,GAAG,IAAI,CAAC,WAAW,CAAC;qBACpD;yBAED;wBACI,IAAI,IAAI,CAAC,UAAU,IAAI,IAAI,CAAC,KAAK,EACjC;4BACI,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,KAAK,CAAC;4BAC7B,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,WAAW,CAAC;yBACzC;;4BACK,IAAI,CAAC,aAAa,GAAG,QAAQ,GAAG,IAAI,CAAC,WAAW,CAAC;qBAC1D;oBACD,IAAI,CAAC,aAAa,CAAC,WAAW,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;oBACjD,IAAI,CAAC,aAAa,CAAC,WAAW,CAAC,WAAW,EAAE,IAAI,CAAC,CAAC;oBAClD,UAAU,IAAI,CAAC,IAAI,IAAI,CAAC,aAAa,CAAC,WAAW,CAAC,gBAAgB,EAAE,IAAI,CAAC,CAAC;oBAC1E,IAAI,IAAI,CAAC,UAAU,IAAI,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,IAAI,CAAC,EACpD;wBACI,IAAI,CAAC,YAAY,GAAG,CAAC,CAAC;wBACtB,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;wBACtB,IAAI,CAAC,aAAa,CAAC,WAAW,CAAC,cAAc,EAAE,IAAI,CAAC,CAAC;qBACxD;yBAED;wBACI,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,SAAS,CAAC;qBAC1D;iBACJ;qBACI,IAAI,KAAK,IAAI,CAAC,EACnB;oBACI,iBAAM,UAAU,YAAC,IAAI,CAAC,CAAC;iBAC1B;YACL,CAAC;YAGa,kBAAM,GAApB;gBAEI,IAAI,KAAK,GAAgB,MAAM,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC,GAAG,EAAkB,CAAC;gBAC5E,OAAO,KAAK,CAAC;YACjB,CAAC;YAEa,eAAG,GAAjB,UAAkB,KAAkB;gBAEhC,WAAW,CAAC,YAAY,CAAC,UAAU,CAAC,KAAY,CAAC,CAAC;gBAClD,MAAM,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC,GAAG,CAAC,KAAqB,CAAC,CAAC;YAC5D,CAAC;YACL,kBAAC;QAAD,CAxEA,AAwEC,CAxEgC,YAAY,GAwE5C;QAxEY,eAAW,cAwEvB,CAAA;IAEL,CAAC,EApGS,GAAG,KAAH,GAAG,QAoGZ","file":"","sourceRoot":"/","sourcesContent":["namespace com \r\n{\r\n    /***\r\n     * 跳帧-又称帧同步\r\n     * 不管系统是否出现延迟，使用JTSyncFrame都将算出最新动画帧数索引\r\n        let gotoFrame:c.JTGotoFrame = c.JTGotoFrame.create();\r\n        gotoFrame.addEventListener(c.JTTimeEvent.ENTER_FRAME, this.onEnterFrameHandler, this);\r\n        gotoFrame.addEventListener(c.JTTimeEvent.SYNC_FRAME, this.onSyncFrame, this);\r\n        gotoFrame.addEventListener(c.JTTimeEvent.ENTER_LAST_FRAME, this.onEnterFrameHandler, this);\r\n        gotoFrame.addEventListener(c.JTTimeEvent.ENTER_COMPLETE, this.onEnterFrameHandler, this);\r\n        gotoFrame.play(10, 10, 0);\r\n   }\r\n\r\n   protected onSyncFrame(gotoFrame:c.JTGotoFrame): void\r\n   {\r\n       c.JTLogger.info(\"jumpFrame for : \" + enterFrame.jumpFrame);\r\n   }\r\n    \r\n\r\n    protected onEnterFrameHandler(gotoFrame:c.JTIEnterFrame): void\r\n    {\r\n        c.JTLogger.info(\"currentFrame for : \" + enterFrame.currentFrame);\r\n    }\r\n\r\n        \r\n     ***/\r\n    export class JTJumpFrame extends JTEnterFrame implements JTIJumpFrame\r\n    {\r\n        private _jumpFrames:number = 0;\r\n        constructor()\r\n        {\r\n            super();\r\n        }\r\n\r\n        /**\r\n         * 获取当前跳了多帧数\r\n         */\r\n        public get jumpFrames():number\r\n        {\r\n             return this._jumpFrames;\r\n        }\r\n\r\n        public updateTick(tick:number):void\r\n        {\r\n            this._currentTick += tick; //叠加时间\r\n            let times:number = Math.floor(this._currentTick / this._interval);//取最小延迟次数\r\n            this._jumpFrames = 0;\r\n            if (times > 1) //延迟帧数逻辑处理\r\n            {\r\n                this._jumpFrames = times - 1;\r\n                let nowTimes:number = this._currentTimes + times;\r\n                let delayLoops:number = Math.floor(nowTimes / this._totalTimes);\r\n                this._loopTimes += delayLoops;\r\n                if (this._loop == 0) \r\n                {\r\n                    this._currentTimes = nowTimes % this._totalTimes;//当循环次数为0是，需要实时计算最后一帧数\r\n                }\r\n                else\r\n                {\r\n                    if (this._loopTimes >= this._loop)\r\n                    {\r\n                        this._loopTimes = this._loop;\r\n                        this._currentTimes = this._totalTimes;//当循环次数为0是，跳转到最后一帧数\r\n                    }\r\n                    else  this._currentTimes = nowTimes % this._totalTimes;//当循环次数为0是，需要实时计算最后一帧数\r\n                }\r\n                this.dispatchEvent(JTTimeEvent.JUMP_FRAME, this);\r\n                this.dispatchEvent(JTTimeEvent.ENTER_FRAME, this);\r\n                delayLoops >= 1 && this.dispatchEvent(JTTimeEvent.ENTER_LAST_FRAME, this);\r\n                if (this._loopTimes >= this._loop && this._loop != 0)\r\n                {\r\n                    this._currentTick = 0;\r\n                    this._running = false;\r\n                    this.dispatchEvent(JTTimeEvent.ENTER_COMPLETE, this);\r\n                }\r\n                else\r\n                {\r\n                    this._currentTick = this._currentTick % this._interval;//重新更新时间节点\r\n                }\r\n            }   \r\n            else if (times == 1) //正常帧数无需跳帧数\r\n            {\r\n                super.updateTick(tick);\r\n            }\r\n        }\r\n      \r\n\r\n        public static create():JTIJumpFrame\r\n        {\r\n            let timer:JTIJumpFrame = JTPool.instance(JTJumpFrame).get() as JTIJumpFrame;\r\n            return timer;\r\n        } \r\n\r\n        public static put(timer:JTIJumpFrame):void\r\n        {\r\n            JTTimerTool.defaultTimer.removeTask(timer as any);\r\n            JTPool.instance(JTJumpFrame).put(timer as JTIJumpFrame);\r\n        }\r\n    }\r\n\r\n}\r\n"]}