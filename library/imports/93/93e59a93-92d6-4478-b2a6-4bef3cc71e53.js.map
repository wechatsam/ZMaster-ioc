{"version":3,"sources":["assets\\Script\\src\\time\\base\\JTTimerTask.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;IAAA,IAAU,GAAG,CA4DZ;IA5DD,WAAU,GAAG;QAET;YAA0C,+BAAiB;YAOvD,qBAAY,QAAmB,EAAE,IAAe;gBAApC,yBAAA,EAAA,YAAmB;gBAAE,qBAAA,EAAA,QAAe;gBAAhD,YAEI,iBAAO,SAGV;gBAVS,kBAAY,GAAU,CAAC,CAAC;gBACxB,eAAS,GAAU,CAAC,CAAC;gBACrB,iBAAW,GAAU,CAAC,CAAC;gBACvB,mBAAa,GAAU,CAAC,CAAC;gBACzB,cAAQ,GAAW,KAAK,CAAC;gBAI/B,KAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;gBAC1B,KAAI,CAAC,WAAW,GAAG,IAAI,CAAC;;YAC5B,CAAC;YAEM,2BAAK,GAAZ;gBAEI,IAAI,CAAC,aAAa,GAAG,CAAC,CAAC;YAC3B,CAAC;YAEM,gCAAU,GAAjB,UAAkB,IAAW;gBAEzB,IAAI,CAAC,YAAY,IAAI,IAAI,CAAC;gBAC1B,IAAI,KAAK,GAAU,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC;gBAClE,IAAI,KAAK,GAAG,CAAC,EACb;oBACI,IAAI,QAAQ,GAAU,IAAI,CAAC,aAAa,GAAG,KAAK,CAAC;oBACjD,IAAI,QAAQ,IAAI,IAAI,CAAC,WAAW,IAAI,IAAI,CAAC,WAAW,IAAI,CAAC,EACzD;wBACI,KAAK,GAAG,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,aAAa,CAAC;qBACjD;oBACD,KAAK,IAAI,CAAC,GAAU,CAAC,EAAE,CAAC,GAAG,KAAK,EAAE,CAAC,EAAE,EACrC;wBACI,IAAI,CAAC,aAAa,EAAG,CAAC;wBACtB,IAAI,CAAC,YAAY,IAAI,IAAI,CAAC,SAAS,CAAC;wBACpC,IAAI,CAAC,aAAa,CAAC,WAAW,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;qBAC/C;iBACJ;gBACD,IAAI,IAAI,CAAC,aAAa,IAAI,IAAI,CAAC,WAAW,IAAI,IAAI,CAAC,WAAW,IAAI,CAAC,EACnE;oBACI,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;oBACtB,IAAI,CAAC,aAAa,CAAC,WAAW,CAAC,cAAc,EAAE,IAAI,CAAC,CAAC;iBACxD;YACL,CAAC;YAID,sBAAW,gCAAO;qBAAlB;oBAEI,OAAO,IAAI,CAAC,QAAQ,CAAC;gBACzB,CAAC;;;eAAA;YAED,6BAAO,GAAP;gBAEI,IAAI,CAAC,OAAO,EAAE,CAAC;gBACf,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,WAAW,GAAG,CAAC,CAAC;gBAC/E,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;YAC1B,CAAC;YACL,kBAAC;QAAD,CAzDA,AAyDC,CAzDyC,iBAAiB,GAyD1D;QAzDqB,eAAW,cAyDhC,CAAA;IACL,CAAC,EA5DS,GAAG,KAAH,GAAG,QA4DZ","file":"","sourceRoot":"/","sourcesContent":["namespace com \r\n{\r\n    export abstract class JTTimerTask extends JTEventDispatcher implements JTITimerTask\r\n    {\r\n        protected _currentTick:number = 0;\r\n        protected _interval:number = 0;\r\n        protected _totalTimes:number = 0;\r\n        protected _currentTimes:number = 0;\r\n        protected _running:boolean = false;\r\n        constructor(interval:number = 0, loop:number = 0)\r\n        {\r\n            super();\r\n            this._interval = interval;\r\n            this._totalTimes = loop;\r\n        }\r\n\r\n        public reset():void\r\n        {\r\n            this._currentTimes = 0;\r\n        }\r\n\r\n        public updateTick(tick:number):void\r\n        {\r\n            this._currentTick += tick; //叠加时间\r\n            let count:number = Math.floor(this._currentTick / this._interval);//取最小延迟次数\r\n            if (count > 0) //延迟次数\r\n            {\r\n                let nowCount:number = this._currentTimes + count;\r\n                if (nowCount >= this._totalTimes && this._totalTimes != 0)\r\n                {\r\n                    count = this._totalTimes - this._currentTimes;\r\n                }\r\n                for (let i:number = 0; i < count; i++)\r\n                {\r\n                    this._currentTimes ++;\r\n                    this._currentTick -= this._interval;\r\n                    this.dispatchEvent(JTTimeEvent.TIMER, this);\r\n                }\r\n            }\r\n            if (this._currentTimes >= this._totalTimes && this._totalTimes != 0)\r\n            {\r\n                this._running = false;\r\n                this.dispatchEvent(JTTimeEvent.TIMER_COMPLETE, this);\r\n            }\r\n        }\r\n\r\n      \r\n\r\n        public get running():boolean\r\n        {\r\n            return this._running;\r\n        }\r\n \r\n        recycle() \r\n        {\r\n            this.removes();\r\n            this._currentTimes = this._currentTick = this._interval = this._totalTimes = 0;\r\n            this._running = false;\r\n        }\r\n    }\r\n}\r\n"]}