{"version":3,"sources":["assets\\Script\\src\\managers\\JTAbstractSceneManager.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["namespace com \r\n{\r\n    export abstract class JTAbstractSceneManager extends JTApplicationContext implements JTISceneManager\r\n    {\r\n        private _layer:fgui.GComponent = null;\r\n\r\n        public static locker:JTLocker = new JTLocker();\r\n\r\n        private _sceneMap:{[name:string]:any} = null;\r\n        private _hostroys:string[] = null;\r\n\r\n        private static _instance:JTISceneManager = null;\r\n\r\n        constructor()\r\n        {\r\n            super();\r\n            this._sceneMap = {};\r\n            this._hostroys = [];\r\n            // cc.macro.CLEANUP_IMAGE_CACHE = false;\r\n            // cc.dynamicAtlasManager.enabled = true;\r\n            // cc.view.setDesignResolutionSize(JTSession.designWidth, JTSession.designHeight, cc.ResolutionPolicy.FIXED_WIDTH);\r\n            // var size: cc.Size = cc.view.getVisibleSize();\r\n            // JTSession.stageWidth = size.width;\r\n            // JTSession.stageHeight = size.height;\r\n        }\r\n\r\n        public build():void \r\n        {\r\n            let sceneManager:JTAbstractSceneManager = JTApplicationBootstrap.getContext(JTApplicationBootstrap.CONTEXT_SCENE);\r\n            JTAbstractSceneManager._instance = sceneManager;\r\n            if (!this._layer)\r\n            {\r\n                let layerManager:JTAbstractLayerManager = JTApplicationBootstrap.getContext(JTApplicationBootstrap.CONTEXT_LAYER);\r\n                this._layer = layerManager.getLayer(JTAbstractLayerManager.LAYER_SCENE) as fgui.GComponent ;\r\n            }\r\n        }\r\n\r\n        public buildComplete(): void \r\n        {\r\n            \r\n        }\r\n\r\n        protected registerSceneClassAlias(type:string, cls:any):void \r\n        {\r\n            this._sceneMap[type] = cls;\r\n        }\r\n\r\n        public async changeScene(sceneType:string):Promise<any> \r\n        {\r\n            let cls:any = this._sceneMap[sceneType];\r\n            let scene:JTScene<fgui.GComponent> = new cls();\r\n            this._hostroys.push(sceneType);\r\n            await JTAbstractSceneManager.locker.lock();\r\n            while (this.layer.numChildren) this._layer.removeChildAt(0);\r\n            this.addChild(scene, fgui.RelationType.Height);\r\n        }\r\n\r\n        public addChild(scene:JTIScene, type?:number):void\r\n        {\r\n            scene.bindUIRelation(this.layer, type)\r\n            this.layer.addChild(scene.componentUI);\r\n        }\r\n\r\n        public back():string\r\n        {\r\n            let type:string = null;\r\n            if (this._hostroys.length > 0)\r\n            {\r\n                type = this._hostroys.pop();\r\n                this.changeScene(type);\r\n            }\r\n            return type;\r\n        }\r\n    \r\n        public static back():void \r\n        {\r\n            this._instance.back();\r\n        }\r\n\r\n        public static changeScene(sceneType:string):void\r\n        {\r\n            this._instance.changeScene(sceneType);\r\n        }\r\n\r\n        public get layer():fgui.GComponent \r\n        {\r\n            return this._layer;\r\n        }\r\n\r\n        public static get instance():JTISceneManager\r\n        {\r\n            return this._instance;\r\n        }\r\n\r\n\r\n    }\r\n}\r\n"]}