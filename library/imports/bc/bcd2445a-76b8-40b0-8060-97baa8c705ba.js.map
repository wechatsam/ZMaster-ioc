{"version":3,"sources":["assets\\Script\\src\\decorators\\injects\\JTResponse.ts"],"names":[],"mappings":";;;;;;IAKA,IAAO,GAAG,CA0CT;IA1CD,WAAO,GAAG;QAQT,SAAgB,QAAQ,CAAC,QAAe,EAAE,UAAyB;YAAzB,2BAAA,EAAA,iBAAyB;YAElE,OAAO,UAAU,MAAU,EAAE,QAAe,EAAE,UAAe;gBAE5D,IAAI,QAAQ,GAAmB,MAAM,CAAC;gBAEtC,QAAQ,CAAC,gBAAgB,CAAC,QAAQ,EAAE,MAAM,CAAC,QAAQ,CAAC,EAAE,MAAM,CAAC,CAAC;YAC/D,CAAC,CAAA;QACF,CAAC;QARe,YAAQ,WAQvB,CAAA;QAgBD,SAAgB,eAAe,CAAC,QAAe,EAAE,aAAiB,EAAE,cAA8B,EAAE,UAAyB;YAAzD,+BAAA,EAAA,sBAA8B;YAAE,2BAAA,EAAA,iBAAyB;YAE5H,OAAO,UAAU,MAAU,EAAE,QAAe,EAAE,UAAe;gBAE5D,IAAI,QAAQ,GAAmB,MAAM,CAAC;gBAEtC,yBAAyB,CAAC,YAAY,CAAC,CAAC,QAAQ,CAAC,GAAG,IAAI,aAAa,CAAC,aAAa,EAAE,cAAc,CAAC,CAAC;gBACrG,QAAQ,CAAC,gBAAgB,CAAC,QAAQ,EAAE,MAAM,CAAC,QAAQ,CAAC,EAAE,MAAM,CAAC,CAAC;YAC/D,CAAC,CAAA;QACF,CAAC;QATe,mBAAe,kBAS9B,CAAA;IACF,CAAC,EA1CM,GAAG,KAAH,GAAG,QA0CT","file":"","sourceRoot":"/","sourcesContent":["\r\n\r\n/*\r\n* name;\r\n*/\r\nmodule com \r\n{\r\n\t/**\r\n\t * 可能由于装饰器模式下，提前注入方法，所以使用项目的静态变量无法使用，没有扫描到\r\n\t * 请求响应 只响应全局事件JTFunctionManager\r\n\t * @param protocol 协议号，目前只支持长连接请求---WebSocket\r\n\t * @returns \r\n\t */\r\n\texport function Response(protocol:number, waitingbar:boolean = true):Function\r\n    {\r\n\t\treturn function (target:any, property:string, descripter?:any) \r\n        {\r\n\t\t\tlet signaler:JTEventSignaler = target;\r\n\t\t//get 方法取代\t// signaler.__funMap = {};//由于装饰器注入的对象是单例时，此方法生效（装鉓器的对象有多个时，未测试）因为该对象并未实例化，装饰器\r\n\t\t\tsignaler.registerFunction(protocol, target[property], target);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t *  \r\n\t * \r\n\t * @param protocol \r\n\t * @returns \r\n\t */\r\n\t/**\r\n\t * 请求响应 只响应全局事件JTFunctionManager\r\n\t * @param protocol 协议号，目前只支持长连接请求---WebSocket\r\n\t * @param __mapperClass 映射结果的数据Class类\r\n\t * @param createFromPool true 是否由对象池创建，如果由对象池创建，当前函数执行完将自动清空回收，false 则由new 创建\r\n\t * @param waitingbar \r\n\t * @returns \r\n\t */\r\n\texport function ResponseMapping(protocol:number, __mapperClass:any, createFromPool:boolean = false, waitingbar:boolean = true):Function\r\n\t{\r\n\t\treturn function (target:any, property:string, descripter?:any) \r\n\t\t{\r\n\t\t\tlet signaler:JTEventSignaler = target;\r\n\t\t\t\t//get 方法取代// signaler.__funMap = {};//由于装饰器注入的对象是单例时，此方法生效（装鉓器的对象有多个时，未测试）因为该对象并未实例化，装饰器\r\n\t\t\tJTAbstractResponseMapping[\"mappingMap\"][protocol] = new JTClassMapper(__mapperClass, createFromPool); //注入MAPPER 映射\r\n\t\t\tsignaler.registerFunction(protocol, target[property], target);\r\n\t\t}\r\n\t}\r\n}\r\n\r\n\r\n\r\n"]}